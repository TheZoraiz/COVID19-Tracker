{"version":3,"sources":["components/DoubleLineChart.js","components/Loading.js","components/SingleLineChart.js","App.js","reportWebVitals.js","index.js"],"names":["DoubleLineChart","title","firstLabel","secondLabel","graphData","dotRadius","type","useState","sample","setSample","useEffect","labels","map","element","newDate","date","datasets","label","data","confirmed","backgroundColor","borderWidth","borderColor","radius","recovered","className","height","width","options","aspectRatio","resposive","legend","fontSize","fontColor","Loading","text","color","SingleLineChart","active","deaths","fetch","require","fetchCountryData","country","Promise","resolve","reject","setTimeout","then","res","json","catch","error","App","visible","setVisible","temp","setTemp","temp2","setTemp2","countries","setCountries","loading","setLoading","firstRecordDate","setFirstRecordDate","secondRecordDate","setSecondRecordDate","secondPickerMinDate","setSecondPickerMinDate","Date","firstDate","setFirstDate","secondDate","setSecondDate","setError","alterDateFormat","dates","formatted","totalYears","forEach","day","slice","length","month","year","push","monthNum","getCountryData","a","value","dataCases","name","Country","Confirmed","Recovered","Active","Deaths","oldDates","formattedDates","i","firstCase","lastCase","lastMonthDataCases","setDefaultDates","console","log","rangeSetter","first","second","startDay","getDate","startMonth","getMonth","startYear","getFullYear","endDay","endMonth","endYear","arr","tempDay","parseInt","tempMonth","tempYear","x","x2","getTime","setDate","ReactGA","initialize","pageview","totalCountries","Countries","slug","Slug","filter","id","style","defaultValue","onChange","format","selectedDate","clearIcon","minDate","maxDate","href","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44131601.chunk.js","sourcesContent":["import './charts.css';\nimport { Line } from 'react-chartjs-2'\nimport { useState, useEffect } from 'react'\n\n\nfunction DoubleLineChart({ title, firstLabel, secondLabel, graphData, type, dotRadius }) {\n  const [ sample, setSample ] = useState({});\n\n  useEffect(() => {\n    setSample({\n      labels: graphData.map(element => element.newDate.date),\n      datasets: [\n        {\n          label: firstLabel,\n          // label: typeBool ? 'Total Cases To Date' : 'Active Cases',\n          data: graphData.map(element => element.confirmed),\n          backgroundColor: 'rgba(1,1,1,0)',\n          borderWidth: 2,\n          borderColor: 'red',\n          radius: dotRadius,\n        },\n        {\n          label: secondLabel,\n          // label: typeBool ? 'Total Recoveries To Date' : 'Total Deaths',\n          data: graphData.map(element => element.recovered),\n          backgroundColor: 'rgba(1,1,1,0)',\n          borderWidth: 2,\n          borderColor: 'turquoise',\n          radius: dotRadius,\n        },\n      ]\n    });\n  }, [graphData])\n\n  return (\n    <div className=\"chart\">\n      <h2 className='country-title'>{title}</h2>\n      <Line\n        data={sample}\n        height={null}\n        width={null}\n        options={{\n          aspectRatio: 1.15,\n          resposive: true,\n          legend: {\n            labels: {\n              fontSize: 15,\n              fontColor: 'black'\n            }\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default DoubleLineChart;\n","import './Loading.css';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\nimport Loader from 'react-loader-spinner'\n\nfunction Loading({ text }) {\n  return (\n    <div className=\"loading\">\n      <Loader\n         type='Oval'\n         color=\"black\"\n         height={70}\n         width={70}\n      />\n      {text}\n    </div>\n  );\n}\n\nexport default Loading;\n","import './charts.css';\nimport { Line } from 'react-chartjs-2'\nimport { useState, useEffect } from 'react'\n\n\nfunction SingleLineChart({ title, type, graphData, dotRadius, label, color }) {\n  const [ sample, setSample ] = useState({});\n\n  useEffect(() => {\n    setSample({\n      labels: graphData.map(element => element.newDate.date),\n      datasets: [\n        {\n            label: label,\n            data: graphData.map(element => type == 'Active' ? element.active : element.deaths),\n            backgroundColor: 'rgba(1,1,1,0)',\n            borderWidth: 2,\n            borderColor: color,\n            radius: dotRadius,\n        },\n      ]\n    });\n  }, [graphData])\n\n  return (\n    <div className=\"chart\">\n      <h2 className='country-title'>{title}</h2>\n      <Line\n        data={sample}\n        height={null}\n        width={null}\n        options={{\n          aspectRatio: 1.15,\n          resposive: true,\n          legend: {\n            labels: {\n              fontSize: 15,\n              fontColor: 'black'\n            }\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default SingleLineChart;\n","import './App.css';\nimport { useState, useEffect } from 'react'\nimport Select from 'react-select';\nimport DatePicker from 'react-date-picker';\nimport ReactGA from 'react-ga';\n\nimport DoubleLineChart from './components/DoubleLineChart.js'\nimport Loading from './components/Loading.js'\nimport SingleLineChart from './components/SingleLineChart';\nconst fetch = require('node-fetch');\n\n\nconst fetchCountries = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => reject('Error!'), 10000);\n    fetch('https://api.covid19api.com/summary')\n      .then(res => res.json())\n      .then(json => {\n        console.log(json);\n        json = json.Countries;\n        // Array of objects with country names and slugs\n        let totalCountries = json.map(element => ({name: element.Country, slug: element.Slug}) );\n        resolve([...totalCountries]);\n      })\n      .catch(error => {\n        setTimeout(() => reject(error), 5000);\n      });\n  }); \n}\n\nconst fetchCountryData = (country) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => reject('Error!'), 5000);\n    fetch(`https://api.covid19api.com/country/${country}`)\n      .then(res => res.json())\n      .then(json => {\n        resolve([...json]);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  }); \n}\n\nconst App = () => {\n  const [ visible, setVisible ] = useState(false);\n  const [ temp, setTemp ] = useState([]);\n  const [ temp2, setTemp2 ] = useState([]);\n  const [ countries, setCountries ] = useState([]);\n  const [ loading, setLoading ] = useState(true);\n\n  const [ firstRecordDate, setFirstRecordDate ] = useState();\n  const [ secondRecordDate, setSecondRecordDate ] = useState();\n  const [ secondPickerMinDate, setSecondPickerMinDate ] = useState(null);\n\n  const [ firstDate, setFirstDate ] = useState(new Date());\n  const [ secondDate, setSecondDate ] = useState(new Date());\n\n  const [ error, setError ] = useState(false);\n\n  const alterDateFormat = (dates) => {\n    let formatted = [];\n    let totalYears = [];\n\n    dates.forEach(date => {\n      let day = date.slice(8, date.length);\n      let month = date.slice(5, 7);\n      let year = date.slice(0, 4);\n\n      if(totalYears[totalYears.length - 1] !== year)\n        totalYears.push(year);\n\n      switch(month) {\n        case '01':\n          formatted.push({month: 'January', monthNum: '01', year: year, day: day, date: `${day} Jan ${year}`});\n          break;\n        case '02':\n          formatted.push({month: 'February', monthNum: '02', year: year, day: day, date: `${day} Feb ${year}`});\n          break;\n        case '03':\n          formatted.push({month: 'March', monthNum: '03', year: year, day: day, date: `${day} March ${year}`});\n          break;\n        case '04':\n          formatted.push({month: 'April', monthNum: '04', year: year, day: day, date: `${day} April ${year}`});\n          break;\n        case '05':\n          formatted.push({month: 'May', monthNum: '05', year: year, day: day, date: `${day} May ${year}`});\n          break;\n        case '06':\n          formatted.push({month: 'June', monthNum: '06', year: year, day: day, date: `${day} June ${year}`});\n          break;\n        case '07':\n          formatted.push({month: 'July', monthNum: '07', year: year, day: day, date: `${day} July ${year}`});\n          break;\n        case '08':\n          formatted.push({month: 'August', monthNum: '08', year: year, day: day, date: `${day} Aug ${year}`});\n          break;\n        case '09':\n          formatted.push({month: 'September', monthNum: '09', year: year, day: day, date: `${day} Sept ${year}`});\n          break;\n        case '10':\n          formatted.push({month: 'October', monthNum: '10', year: year, day: day, date: `${day} Oct ${year}`});\n          break;\n        case '11':\n          formatted.push({month: 'November', monthNum: '11', year: year, day: day, date: `${day} Nov ${year}`});\n          break;\n        case '12':\n          formatted.push({month: 'December', monthNum: '12', year: year, day: day, date: `${day} Dec ${year}`});\n          break;\n      }\n    });\n\n    return formatted;\n  }\n\n  const getCountryData = async(country) => {\n    try {\n      let data = await fetchCountryData(country.value);\n      let dataCases = data.map(element => {\n        return {\n          name: element.Country,\n          confirmed: element.Confirmed,\n          recovered: element.Recovered,\n          active: element.Active,\n          deaths: element.Deaths,\n          date: element.Date.slice(0, 10),\n        }\n      });\n\n      let oldDates = dataCases.map(element => element.date);\n      let formattedDates = alterDateFormat(oldDates);\n\n      let i = 0;\n      dataCases = dataCases.map(element => ({...element, newDate: formattedDates[i++]}) );\n\n      let firstCase = dataCases[0];\n      let lastCase = dataCases[dataCases.length - 1];\n\n      setFirstRecordDate(new Date(`${firstCase.newDate.year}-${firstCase.newDate.monthNum}-${firstCase.newDate.day}`));\n      setSecondRecordDate(new Date(`${lastCase.newDate.year}-${lastCase.newDate.monthNum}-${lastCase.newDate.day}`));\n      \n      let lastMonthDataCases = dataCases.slice(dataCases.length - 30, dataCases.length);\n\n      setTemp(dataCases);\n\n      setTemp2(lastMonthDataCases);\n      setDefaultDates(lastMonthDataCases);\n\n      setVisible(true);\n      setLoading(false);\n\n    } catch(e) {\n      console.log(e);\n      setError(true);\n      setVisible(false);\n      setLoading(false);\n    }\n  }\n\n  const onFirstDateChange = (selectedDate) => {\n    setFirstDate(selectedDate);\n\n    // So that you can't select a date BEFORE first date\n    let x = new Date(selectedDate.getTime());\n    x.setDate(x.getDate() + 1);\n    setSecondPickerMinDate(x);\n\n    rangeSetter(selectedDate, null);\n  }\n\n  const onSecondDateChange = (selectedDate) => {\n    setSecondDate(selectedDate);\n    rangeSetter(null, selectedDate);\n  }\n\n  const rangeSetter = (first, second) => {\n    // Condition because state changers don't immediatelly alter state\n    if(first == null)\n      first = firstDate;\n    else if (second == null)\n      second = secondDate;    \n    \n    let startDay = first.getDate();\n    let startMonth = first.getMonth() + 1;\n    let startYear = first.getFullYear();\n\n    let endDay = second.getDate();\n    let endMonth = second.getMonth() + 1;\n    let endYear = second.getFullYear();\n\n    let arr = [];\n\n    // If selected years are different\n    if(startYear < endYear) {\n      temp.forEach(element => {\n        let tempDay = parseInt(element.newDate.day);\n        let tempMonth = parseInt(element.newDate.monthNum);\n        let tempYear = parseInt(element.newDate.year);\n        \n        if(tempYear == startYear) {\n          if(tempMonth == startMonth) {\n            if(tempDay >= startDay)\n              arr.push(element);\n          } else if(tempMonth >= startMonth)\n            arr.push(element);\n        } else if(tempYear >= startYear && tempYear < endYear) {\n          arr.push(element);\n        } else if(tempYear == endYear) {\n          if(tempMonth == endMonth) {\n            if(tempDay <= endDay)\n              arr.push(element);\n          } else if(tempMonth <= endMonth)\n            arr.push(element);\n        }\n      });\n    \n    // If selected years are same\n    } else {\n      temp.forEach(element => {\n        let tempDay = parseInt(element.newDate.day);\n        let tempMonth = parseInt(element.newDate.monthNum);\n        let tempYear = parseInt(element.newDate.year);\n  \n          if(tempMonth >= startMonth && tempMonth <= endMonth) {\n            if(startMonth != endMonth) {\n              if(tempMonth == startMonth) {\n                if(tempDay >= startDay)\n                  arr.push(element)\n              } else if(tempMonth == endMonth) {\n                if(tempDay <= endDay)\n                  arr.push(element);\n              } else {\n                arr.push(element);\n              }\n            } else {\n              if(tempDay >= startDay && tempDay <= endDay)\n                arr.push(element);\n            }\n          }\n      });\n    }\n\n    setTemp2(arr);\n  }\n\n  const setDefaultDates = (lastMonthDataCases) => {\n    let x = new Date(lastMonthDataCases[0].date);\n    let first = new Date(x.getFullYear(), x.getMonth(), 1);\n    \n    setFirstDate(first);\n\n    // So that you can't select a date BEFORE first date\n    let x2 = new Date(first.getTime());\n    x2.setDate(x2.getDate() + 1);\n    setSecondPickerMinDate(x2);\n  }\n\n  useEffect(async() => {\n    ReactGA.initialize('UA-183443755-2');\n    ReactGA.pageview('/');\n\n    try {\n      let totalCountries = await fetchCountries()\n\n      // Because the data for united states is not showing up on the API, for some reason\n      totalCountries = totalCountries.filter(element => element.slug != 'united-states');\n\n      setCountries(totalCountries);\n      \n      getCountryData({ value: 'pakistan' })\n\n    } catch(e) {\n      console.log(e);\n      setError(true);\n      setVisible(false);\n      setLoading(false);\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div id='first-section'>\n        <h1 className='heading'>COVID-19 Tracker</h1>\n        <h3 id='tagline'>Stay Home & Stay Safe</h3>\n\n        <hr style={{width: '95%'}}/>\n\n        <div className='selectors'>\n          <div className='select-container'>\n            <h3>Select Country / Region</h3>\n            <Select\n              options={ countries.map(country => ({ value: country.slug, label: country.name }) )}\n              defaultValue={ ({value: 'pakistan', label: 'Pakistan'}) }\n              onChange={ getCountryData }\n            />\n          </div>\n          <div className='date-picker-wrapper'>\n            <div className='date-picker'>\n              <h3>From</h3>\n\n              <DatePicker\n                format='dd-MM-y'\n                onChange={onFirstDateChange}\n                value={firstDate}\n                clearIcon={null}\n                minDate={firstRecordDate}\n                maxDate={secondDate}\n                className='picker'\n              />\n            </div>\n            <div className='date-picker'>\n              <h3>To</h3>\n\n              <DatePicker\n                format='dd-MM-y'\n                onChange={onSecondDateChange}\n                value={secondDate}\n                clearIcon={null}\n                minDate={secondPickerMinDate}\n                maxDate={secondRecordDate}\n                className='picker'\n              />\n              </div>\n          </div>\n        </div>\n\n        <hr style={{width: '95%'}}/>\n\n        {visible &&\n          <div className='row'>\n            <DoubleLineChart\n              title={`${temp[0].name} Cases & Recoveries`}\n              firstLabel='Total Cases'\n              secondLabel='Total Recoveries'\n              graphData={temp2}\n              dotRadius={0}\n            />\n            <SingleLineChart\n              title={`${temp[0].name} Active Cases`}\n              type='Active'\n              label='Active Cases'\n              graphData={temp2}\n              color='orange'\n              dotRadius={0}\n            /> \n            <SingleLineChart\n              title={`${temp[0].name} Total Deaths`}\n              type='Deaths'\n              label='Total Deaths'\n              graphData={temp2}\n              color='red'\n              dotRadius={0}\n            /> \n          </div>\n        }\n\n        {loading && <Loading className='charts' text={'Loading...'} />}\n\n        {error &&\n          <div className='error-wrapper'>\n            <h1>Error!</h1>\n            <p>\n              There was an error retrieving the data.\n              <br/>\n              Please refresh the page or try again after a few minutes.\n            </p>\n          </div>\n        }\n        <div className='about-wrapper'>\n          <h2>About</h2>\n          <p>\n            The data used for the graphs in this project is publicly available\n            and was obtained from the COVID 19 API <a href='https://covid19api.com' target='_blank'>here</a>.\n            All credits for the data go to the source. Please visit their website and support them if you can.\n            <br />\n            <br />\n            The project is open source and you can view the source code <a href='https://github.com/TheZoraiz/React-COVID19-Tracker' target='_blank'>here</a>\n\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}