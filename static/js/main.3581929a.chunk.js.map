{"version":3,"sources":["components/CustomChart.js","components/Loading.js","App.js","reportWebVitals.js","index.js"],"names":["CustomChart","title","graphData","type","dots","useState","sample","setSample","typeBool","useEffect","labels","map","element","date","slice","datasets","label","data","confirmed","active","backgroundColor","borderWidth","borderColor","radius","recovered","deaths","className","height","width","options","aspectRatio","resposive","legend","fontSize","fontColor","Loading","text","color","fetch","require","fetchCountryData","country","Promise","resolve","reject","then","res","json","catch","error","App","visible","setVisible","temp","setTemp","countries","setCountries","loading","setLoading","chosenMonth","setChosenMonth","chosenYear","setChosenYear","yearlyDisplay","setYearlyDisplay","availableYears","setAvailableYears","alterDateFormat","dates","formatted","totalYears","forEach","day","length","month","year","push","getCountryData","a","value","dataCases","name","Country","Confirmed","Recovered","Active","Deaths","Date","oldDates","formattedDates","i","ReactGA","initialize","pageview","totalCountries","Countries","slug","Slug","filter","id","style","onChange","thing","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3581929a.chunk.js","sourcesContent":["import './charts.css';\r\nimport { Line } from 'react-chartjs-2'\r\nimport { useState, useEffect } from 'react'\r\n\r\n\r\nfunction CustomChart({ title, graphData, type, dots }) {\r\n  const [ sample, setSample ] = useState({});\r\n  const [ typeBool ] = useState((type == 'first'))\r\n\r\n  useEffect(() => {\r\n    setSample({\r\n      labels: graphData.map(element => dots != 0 ? element.date.date : element.date.date.slice(3)),\r\n      datasets: [\r\n        {\r\n          label: typeBool ? 'Total Cases To Date' : 'Active Cases',\r\n          data: graphData.map(element => typeBool ? element.confirmed : element.active),\r\n          backgroundColor: 'rgba(1,1,1,0)',\r\n          borderWidth: 2,\r\n          borderColor: typeBool ? '#ff4040' : 'orange',\r\n          radius: dots,\r\n        },\r\n        {\r\n          label: typeBool? 'Total Recoveries To Date' : 'Total Deaths',\r\n          data: graphData.map(element => typeBool ? element.recovered : element.deaths),\r\n          backgroundColor: 'rgba(1,1,1,0)',\r\n          borderWidth: 2,\r\n          borderColor: typeBool ? 'turquoise' : 'red',\r\n          radius: dots,\r\n        },\r\n      ]\r\n    });\r\n  }, [graphData])\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <h2 className='country-title'>{typeBool ? `${title} Case History` : `${title} Current Cases`}</h2>\r\n      <Line\r\n        data={sample}\r\n        height={null}\r\n        width={null}\r\n        options={{\r\n          aspectRatio: 1.15,\r\n          resposive: true,\r\n          legend: {\r\n            labels: {\r\n              fontSize: 15,\r\n              fontColor: 'black'\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomChart;\r\n","import './Loading.css';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nfunction Loading({ text }) {\r\n  return (\r\n    <div className=\"loading\">\r\n      <Loader\r\n         type='Oval'\r\n         color=\"black\"\r\n         height={70}\r\n         width={70}\r\n      />\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import './App.css';\nimport { useState, useEffect } from 'react'\nimport Select from 'react-select';\nimport ReactGA from 'react-ga';\n\nimport CustomChart from './components/CustomChart.js'\nimport Loading from './components/Loading.js'\nconst fetch = require('node-fetch');\n\n\nconst fetchCountries = () => {\n  return new Promise((resolve, reject) => {\n    fetch('https://api.covid19api.com/summary')\n      .then(res => res.json())\n      .then(json => {\n        json = json.Countries;\n        // Array of objects with country names and slugs\n        let totalCountries = json.map(element => ({name: element.Country, slug: element.Slug}) );\n        resolve([...totalCountries]);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  }); \n}\n\nconst fetchCountryData = (country) => {\n  return new Promise((resolve, reject) => {\n    fetch(`https://api.covid19api.com/country/${country}`)\n      .then(res => res.json())\n      .then(json => {\n        resolve([...json]);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  }); \n}\n\nconst App = () => {\n  const [ visible, setVisible ] = useState(false);\n  const [ temp, setTemp ] = useState([]);\n  const [ countries, setCountries ] = useState([]);\n  const [ loading, setLoading ] = useState(true);\n  const [ chosenMonth, setChosenMonth ] = useState('');\n  const [ chosenYear, setChosenYear ] = useState('2020');\n  const [ yearlyDisplay, setYearlyDisplay ] = useState(false);\n  \n  const [ availableYears, setAvailableYears ] = useState([]);\n\n  const alterDateFormat = (dates) => {\n    let formatted = [];\n    let totalYears = [];\n\n    dates.forEach(date => {\n      let day = date.slice(8, date.length);\n      let month = date.slice(5, 7);\n      let year = date.slice(0, 4);\n\n      if(totalYears[totalYears.length - 1] != year)\n        totalYears.push(year);\n\n      switch(month) {\n        case '01':\n          formatted.push({month: 'January', year: year, date: `${day} Jan ${year}`});\n          break;\n        case '02':\n          formatted.push({month: 'February', year: year, date: `${day} Feb ${year}`});\n          break;\n        case '03':\n          formatted.push({month: 'March', year: year, date: `${day} March ${year}`});\n          break;\n        case '04':\n          formatted.push({month: 'April', year: year, date: `${day} April ${year}`});\n          break;\n        case '05':\n          formatted.push({month: 'May', year: year, date: `${day} May ${year}`});\n          break;\n        case '06':\n          formatted.push({month: 'June', year: year, date: `${day} June ${year}`});\n          break;\n        case '07':\n          formatted.push({month: 'July', year: year, date: `${day} July ${year}`});\n          break;\n        case '08':\n          formatted.push({month: 'August', year: year, date: `${day} Aug ${year}`});\n          break;\n        case '09':\n          formatted.push({month: 'September', year: year, date: `${day} Sept ${year}`});\n          break;\n        case '10':\n          formatted.push({month: 'October', year: year, date: `${day} Oct ${year}`});\n          break;\n        case '11':\n          formatted.push({month: 'November', year: year, date: `${day} Nov ${year}`});\n          break;\n        case '12':\n          formatted.push({month: 'December', year: year, date: `${day} Dec ${year}`});\n          break;\n      }\n    });\n\n    setChosenMonth(formatted[formatted.length - 1].month);\n    setAvailableYears(totalYears);\n    return formatted;\n  }\n\n  const getCountryData = async(country) => {\n    let data = await fetchCountryData(country.value);\n    let dataCases = data.map(element => {\n      return {\n        name: element.Country,\n        confirmed: element.Confirmed,\n        recovered: element.Recovered,\n        active: element.Active,\n        deaths: element.Deaths,\n        date: element.Date.slice(0, 10),\n      }\n    });\n\n    let oldDates = dataCases.map(element => element.date);\n    let formattedDates = alterDateFormat(oldDates);\n\n    let i = 0;\n    dataCases = dataCases.map(element => ({...element, date: formattedDates[i++]}) );\n\n    // dataCases = dataCases.slice(dataCases.length - 31, dataCases.length);\n\n    setTemp(dataCases);\n    setVisible(true);\n    setLoading(false);\n  }\n\n  useEffect(async() => {\n    ReactGA.initialize('UA-183443755-2');\n    ReactGA.pageview('/');\n    \n    let totalCountries = await fetchCountries()\n\n    // Because the data for united states is not showing up on the API, for some reason\n    totalCountries = totalCountries.filter(element => element.slug != 'united-states');\n\n    setCountries(totalCountries);\n    getCountryData({ value: totalCountries[0].slug })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1 className='heading'>COVID-19 Tracker</h1>\n      <h2 id='daddy'>By Zoraiz</h2>\n\n      <hr style={{width: '95%'}}/>\n\n      <div className='selectors'>\n        <div className='select-container select-country'>\n          <h3>Select Country / Region</h3>\n          <Select\n            options={ countries.map(country => ({ value: country.slug, label: country.name }) )}\n            onChange={ getCountryData }\n          />\n        </div>\n        <div className='lower-row'>\n          <section className='select-container select-month'>\n            <h3>Select Month</h3>\n            \n            <div>\n              <Select\n                options={ [\n                  {value: 'ALL YEAR', label: 'ALL YEAR'},\n                  {value: 'January', label: 'January'},\n                  {value: 'February', label: 'February'},\n                  {value: 'March', label: 'March'},\n                  {value: 'April', label: 'April'},\n                  {value: 'May', label: 'May'},\n                  {value: 'June', label: 'June'},\n                  {value: 'July', label: 'July'},\n                  {value: 'August', label: 'August'},\n                  {value: 'September', label: 'September'},\n                  {value: 'October', label: 'October'},\n                  {value: 'November', label: 'November'},\n                  {value: 'December', label: 'December'},\n                ] }\n                onChange={ (thing) => {\n                  if(thing.value != 'ALL YEAR') {\n                    setYearlyDisplay(false);\n                    setChosenMonth(thing.value);\n                  } else {\n                    setYearlyDisplay(true);\n                  }\n                }}\n              />\n            </div>\n          </section>\n          <section className='select-container select-year'>\n            <h3>Select Year</h3>\n            \n            <Select\n              options={ availableYears.map(year => ({value: year, label: year}) ) }\n              onChange={ (thing) => setChosenYear(thing.value)}\n            />\n          </section>\n        </div>\n      </div>\n\n      <hr style={{width: '95%'}}/>\n\n      {visible && !yearlyDisplay &&\n        <div className='row'>\n        <CustomChart title={temp[0].name} type={'first'} graphData={temp.filter(element => element.date.month == chosenMonth && element.date.year == chosenYear)} dots={1.2}/>\n        <CustomChart title={temp[0].name} type={'second'} graphData={temp.filter(element => element.date.month == chosenMonth && element.date.year == chosenYear)} dots={1.2}/> \n        </div>\n      }\n      {visible && yearlyDisplay &&\n        <div className='row'>\n        <CustomChart title={temp[0].name} type={'first'} graphData={temp} dots={0}/>\n        <CustomChart title={temp[0].name} type={'second'} graphData={temp} dots={0}/> \n        </div>\n      }\n      {loading && <Loading className='charts' text={'Loading...'} />}\n\n      {visible &&\n        <div className='about'>\n        <h2>About</h2>\n        <p>\n          The data used for the graphs in this project is publicly available\n          and was obtained from the COVID 19 API <a href='https://covid19api.com'>here</a>.\n          All credits for the data go to the source. Please visit their website and support them.\n          <br />\n          <br />\n          As for the project itself, it's open source and you can view the source code <a href='https://github.com/TheZoraiz/React-COVID19-Tracker'>here</a>\n\n        </p>\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}