{"version":3,"sources":["components/CustomChart.js","components/Loading.js","App.js","reportWebVitals.js","index.js"],"names":["CustomChart","title","graphData","type","text","useState","sample","setSample","typeBool","useEffect","labels","map","element","date","slice","datasets","label","data","confirmed","active","backgroundColor","borderWidth","borderColor","radius","recovered","deaths","className","height","width","options","aspectRatio","resposive","Loading","color","fetch","require","fetchCountryRecentMonthData","country","Promise","resolve","reject","then","res","json","recentMonthData","length","catch","error","App","visible","setVisible","temp","setTemp","countries","setCountries","setSelectedCountry","loading","setLoading","getCountryData","a","value","dataCases","name","Country","Confirmed","Recovered","Active","Deaths","Date","totalCountries","Countries","slug","Slug","id","onChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.622fbd63.chunk.js","sourcesContent":["import './charts.css';\r\nimport { Line } from 'react-chartjs-2'\r\nimport { useState, useEffect } from 'react'\r\n\r\n\r\nfunction CustomChart({ title, graphData, type, text }) {\r\n  const [ sample, setSample ] = useState({});\r\n  const [ typeBool ] = useState((type == 'first'))\r\n\r\n  useEffect(() => {\r\n    setSample({\r\n      labels: graphData.map(element => element.date.slice(0, 10)),\r\n      datasets: [\r\n        {\r\n          label: typeBool ? 'Total Case History' : 'Active Cases',\r\n          data: typeBool ? graphData.map(element => element.confirmed) : graphData.map(element => element.active),\r\n          backgroundColor: 'rgba(1,1,1,0)',\r\n          borderWidth: 2,\r\n          borderColor: typeBool ? '#ff4040' : 'orange',\r\n          radius: 1.2,\r\n        },\r\n        {\r\n          label: typeBool? 'Total Cases Recovered' : 'Total Deaths',\r\n          data: typeBool ? graphData.map(element => element.recovered) : graphData.map(element => element.deaths),\r\n          backgroundColor: 'rgba(1,1,1,0)',\r\n          borderWidth: 2,\r\n          borderColor: typeBool ? 'turquoise' : 'red',\r\n          radius: 1.2,\r\n        },\r\n      ]\r\n    });\r\n  }, [graphData])\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <h2 className='country-title'>{typeBool ? `${title} Case History` : `${title} Current Cases`}</h2>\r\n      <Line\r\n      data={sample}\r\n      height={null}\r\n      width={null}\r\n      options={{\r\n        aspectRatio: 1.15,\r\n        resposive: true,\r\n      }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomChart;\r\n","import './Loading.css';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nfunction Loading({ text }) {\r\n  return (\r\n    <div className=\"loading\">\r\n      <Loader\r\n         type='Oval'\r\n         color=\"black\"\r\n         height={70}\r\n         width={70}\r\n      />\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import './App.css';\nimport { useState, useEffect } from 'react'\nimport Select from 'react-select';\n\nimport CustomChart from './components/CustomChart.js'\nimport Loading from './components/Loading.js'\nconst fetch = require('node-fetch');\n\nconst fetchCountries = () => {\n  return new Promise((resolve, reject) => {\n    fetch('https://api.covid19api.com/summary')\n      .then(res => res.json())\n      .then(json => {\n        json = json.Countries;\n        // Array of objects with country names and slugs\n        let totalCountries = json.map(element => {\n          return {name: element.Country, slug: element.Slug}\n        });\n        resolve([...totalCountries]);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  }); \n}\n\nconst fetchCountryRecentMonthData = (country) => {\n  return new Promise((resolve, reject) => {\n    fetch(`https://api.covid19api.com/country/${country}`)\n      .then(res => res.json())\n      .then(json => {\n        // Get the most recent month's data\n        let recentMonthData = json.slice(json.length - 30, json.length);\n\n        resolve([...recentMonthData]);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  }); \n}\n\nconst App = () => {\n  const [ visible, setVisible ] = useState(false);\n  const [ temp, setTemp ] = useState([]);\n  const [ countries, setCountries ] = useState([]);\n  const [ selectedCountry, setSelectedCountry ] = useState(null);\n  const [ loading, setLoading ] = useState(true);\n  let key = 1;\n\n\n  const getCountryData = async(country) => {\n    let data = await fetchCountryRecentMonthData(country.value);\n    let dataCases = data.map(element => {\n      return {\n        name: element.Country,\n        confirmed: element.Confirmed,\n        recovered: element.Recovered,\n        active: element.Active,\n        deaths: element.Deaths,\n        date: element.Date\n      }\n    });\n\n    setTemp(dataCases);\n    setSelectedCountry(country.value);\n    setVisible(true);\n    setLoading(false);\n  }\n\n  useEffect(async() => {\n    let totalCountries = await fetchCountries()\n    setCountries(totalCountries);\n    getCountryData({value: totalCountries[0].slug})\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      <h1 className='heading'>Monthly COVID-19 Tracker</h1>\n      <h3 id='daddy'>By Zoraiz</h3>\n      \n      <div className='select-container'>\n        <h3>Select Country</h3>\n        <Select\n          options={ countries.map(country => {\n            return {value: country.slug, label: country.name}\n          }) }\n          value={ 'afghanistan' }\n          onChange={ getCountryData }\n        />\n      </div>\n\n      {visible && \n        <div className='row'>\n        <CustomChart title={temp[0].name} type={'first'} graphData={temp} />\n        <CustomChart title={temp[0].name} type={'second'} graphData={temp} /> \n        </div>\n      }\n      {loading && <Loading className='charts' text={'Loading...'} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}