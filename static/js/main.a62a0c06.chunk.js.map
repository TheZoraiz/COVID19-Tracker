{"version":3,"sources":["Constants.js","components/DoubleLineChart.js","components/Loading.js","components/SingleLineChart.js","fetchMethods.js","utilMethods.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","GoogleAnalyticsTag","officialAPI","officialAPICountry","backupServerCountriesURL","backupServerURL","DoubleLineChart","country","title","firstLabel","secondLabel","graphData","dotRadius","useState","sample","setSample","useEffect","labels","map","element","newDate","date","datasets","label","data","confirmed","backgroundColor","borderWidth","borderColor","radius","recovered","className","height","width","options","aspectRatio","resposive","legend","fontSize","fontColor","Loading","text","type","color","SingleLineChart","active","deaths","fetch","require","fetchCountries","url","Promise","resolve","reject","setTimeout","then","res","json","totalCountries","Countries","name","Country","slug","Slug","catch","error","fetchCountryData","alterDateFormat","dates","formatted","totalYears","forEach","day","slice","length","month","year","push","monthNum","rangeSetter","first","second","firstDate","secondDate","temp","startDay","getDate","startMonth","getMonth","startYear","getFullYear","endDay","endMonth","endYear","arr","tempDay","parseInt","tempMonth","tempYear","Constants","App","visible","setVisible","setTemp","temp2","setTemp2","countries","setCountries","loading","setLoading","firstRecordDate","setFirstRecordDate","secondRecordDate","setSecondRecordDate","secondPickerMinDate","setSecondPickerMinDate","firstPickerMaxDate","setFirstPickerMaxDate","Date","setFirstDate","setSecondDate","showMessage","setShowMessage","setError","getCountryData","a","ReactGA","event","category","action","value","dataCases","Confirmed","Recovered","Active","Deaths","oldDates","formattedDates","i","firstCase","lastCase","lastMonthDataCases","setDefaultDates","tempFirst","setDate","initialize","pageview","console","log","filter","id","style","defaultValue","onChange","format","selectedDate","toLocaleString","x","getTime","clearIcon","minDate","maxDate","y","href","target","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a62a0c06.chunk.js","sourcesContent":["module.exports = {\n    GoogleAnalyticsTag: 'UA-183443755-2',\n\n    officialAPI: 'https://api.covid19api.com/summary',\n    officialAPICountry: 'https://api.covid19api.com/country/',\n\n    backupServerCountriesURL: 'https://covid19trackerbackend.herokuapp.com/countries',\n    backupServerURL: 'https://covid19trackerbackend.herokuapp.com/',\n}","import './charts.css';\nimport { Line } from 'react-chartjs-2'\nimport { useState, useEffect } from 'react'\n\n\nconst DoubleLineChart = ({\n  country,\n  title,\n  firstLabel,\n  secondLabel,\n  graphData,\n  dotRadius,\n  }) => {\n  const [ sample, setSample ] = useState({});\n\n  useEffect(() => {\n    setSample({\n      labels: graphData.map(element => element.newDate.date),\n      datasets: [\n        {\n          label: firstLabel,\n          // label: typeBool ? 'Total Cases To Date' : 'Active Cases',\n          data: graphData.map(element => element.confirmed),\n          backgroundColor: 'rgba(1,1,1,0)',\n          borderWidth: 2,\n          borderColor: 'red',\n          radius: dotRadius,\n        },\n        {\n          label: secondLabel,\n          // label: typeBool ? 'Total Recoveries To Date' : 'Total Deaths',\n          data: graphData.map(element => element.recovered),\n          backgroundColor: 'rgba(1,1,1,0)',\n          borderWidth: 2,\n          borderColor: 'turquoise',\n          radius: dotRadius,\n        },\n      ]\n    });\n  }, [graphData])\n\n  return (\n    <div className=\"chart\">\n      <h2 className='country-name'>{country}</h2>\n      <h2 className='country-title'>{title}</h2>\n      <Line\n        data={sample}\n        height={null}\n        width={null}\n        options={{\n          aspectRatio: 1.15,\n          resposive: true,\n          legend: {\n            labels: {\n              fontSize: 15,\n              fontColor: 'black'\n            }\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default DoubleLineChart;\n","import './Loading.css';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\nimport Loader from 'react-loader-spinner'\n\nfunction Loading({ text }) {\n  return (\n    <div className=\"loading\">\n      <Loader\n         type='Oval'\n         color=\"black\"\n         height={70}\n         width={70}\n      />\n      {text}\n    </div>\n  );\n}\n\nexport default Loading;\n","import './charts.css';\nimport { Line } from 'react-chartjs-2'\nimport { useState, useEffect } from 'react'\n\n\nconst SingleLineChart = ({ \n  country,\n  title,\n  type,\n  graphData,\n  dotRadius,\n  label,\n  color,\n  }) => {\n  const [ sample, setSample ] = useState({});\n\n  useEffect(() => {\n    setSample({\n      labels: graphData.map(element => element.newDate.date),\n      datasets: [\n        {\n            label: label,\n            data: graphData.map(element => type === 'Active' ? element.active : element.deaths),\n            backgroundColor: 'rgba(1,1,1,0)',\n            borderWidth: 2,\n            borderColor: color,\n            radius: dotRadius,\n        },\n      ]\n    });\n  }, [graphData])\n\n  return (\n    <div className=\"chart\">\n      <h2 className='country-name'>{country}</h2>\n      <h2 className='country-title'>{title}</h2>\n      <Line\n        data={sample}\n        height={null}\n        width={null}\n        options={{\n          aspectRatio: 1.15,\n          resposive: true,\n          legend: {\n            labels: {\n              fontSize: 15,\n              fontColor: 'black'\n            }\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default SingleLineChart;\n","const fetch = require('node-fetch');\n\nconst fetchCountries = (url) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => reject('Error!'), 10000);\n    fetch(url)\n      .then(res => res.json())\n      .then(json => {\n        json = json.Countries;\n        // Array of objects with country names and slugs\n        let totalCountries = json.map(element => ({name: element.Country, slug: element.Slug}) );\n        resolve([...totalCountries]);\n      })\n      .catch(error => {\n          reject(error)\n      });\n  }); \n}\n\nconst fetchCountryData = (url, country) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => reject('Error!'), 5000);\n    fetch(`${url}${country}`)\n      .then(res => {\n        return res.json()\n      })\n      .then(json => {\n        resolve([...json]);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  }); \n}\n\nexport {\n    fetchCountries,\n    fetchCountryData,\n}","const alterDateFormat = (dates) => {\n    let formatted = [];\n    let totalYears = [];\n\n    dates.forEach(date => {\n        let day = date.slice(8, date.length);\n        let month = date.slice(5, 7);\n        let year = date.slice(0, 4);\n\n        if(totalYears[totalYears.length - 1] !== year)\n            totalYears.push(year);\n\n        switch(month) {\n            case '01':\n                formatted.push({month: 'January', monthNum: '01', year: year, day: day, date: `${day} Jan ${year}`});\n                break;\n            case '02':\n                formatted.push({month: 'February', monthNum: '02', year: year, day: day, date: `${day} Feb ${year}`});\n                break;\n            case '03':\n                formatted.push({month: 'March', monthNum: '03', year: year, day: day, date: `${day} March ${year}`});\n                break;\n            case '04':\n                formatted.push({month: 'April', monthNum: '04', year: year, day: day, date: `${day} April ${year}`});\n                break;\n            case '05':\n                formatted.push({month: 'May', monthNum: '05', year: year, day: day, date: `${day} May ${year}`});\n                break;\n            case '06':\n                formatted.push({month: 'June', monthNum: '06', year: year, day: day, date: `${day} June ${year}`});\n                break;\n            case '07':\n                formatted.push({month: 'July', monthNum: '07', year: year, day: day, date: `${day} July ${year}`});\n                break;\n            case '08':\n                formatted.push({month: 'August', monthNum: '08', year: year, day: day, date: `${day} Aug ${year}`});\n                break;\n            case '09':\n                formatted.push({month: 'September', monthNum: '09', year: year, day: day, date: `${day} Sept ${year}`});\n                break;\n            case '10':\n                formatted.push({month: 'October', monthNum: '10', year: year, day: day, date: `${day} Oct ${year}`});\n                break;\n            case '11':\n                formatted.push({month: 'November', monthNum: '11', year: year, day: day, date: `${day} Nov ${year}`});\n                break;\n            case '12':\n                formatted.push({month: 'December', monthNum: '12', year: year, day: day, date: `${day} Dec ${year}`});\n                break;\n        }\n    });\n\n    return formatted;\n}\n\nconst rangeSetter = (first, second, firstDate, secondDate, temp) => {\n    // Condition because state changers don't immediatelly alter state\n    if(first === null)\n        first = firstDate;\n    else if (second === null)\n        second = secondDate;\n\n    let startDay = first.getDate();\n    let startMonth = first.getMonth() + 1;\n    let startYear = first.getFullYear();\n\n    let endDay = second.getDate();\n    let endMonth = second.getMonth() + 1;\n    let endYear = second.getFullYear();\n\n    let arr = [];\n\n    // If selected years are different\n    if(startYear < endYear) {\n        temp.forEach(element => {\n            let tempDay = parseInt(element.newDate.day);\n            let tempMonth = parseInt(element.newDate.monthNum);\n            let tempYear = parseInt(element.newDate.year);\n            \n            if(tempYear === startYear) {\n                if(tempMonth === startMonth) {\n                    if(tempDay >= startDay)\n                        arr.push(element);\n                    } else if(tempMonth >= startMonth)\n                        arr.push(element);\n            } else if(tempYear >= startYear && tempYear < endYear) {\n                arr.push(element);\n            } else if(tempYear === endYear) {\n                if(tempMonth === endMonth) {\n                    if(tempDay <= endDay)\n                        arr.push(element);\n                } else if(tempMonth <= endMonth)\n                    arr.push(element);\n            }\n        });\n\n    // If selected years are same\n    } else {\n        temp.forEach(element => {\n            let tempDay = parseInt(element.newDate.day);\n            let tempMonth = parseInt(element.newDate.monthNum);\n            let tempYear = parseInt(element.newDate.year);\n\n            if(tempYear === endYear) {\n                if(tempMonth >= startMonth && tempMonth <= endMonth) {\n                    if(startMonth !== endMonth) {\n                        if(tempMonth === startMonth) {\n                            if(tempDay >= startDay)\n                                arr.push(element)\n                        } else if(tempMonth === endMonth) {\n                            if(tempDay <= endDay)\n                                arr.push(element);\n                        } else {\n                            arr.push(element);\n                        }\n                    } else {\n                        if(tempDay >= startDay && tempDay <= endDay)\n                            arr.push(element);\n                    }\n                }\n            }\n        });\n    }\n\n    return arr\n}\n\nexport {\n    alterDateFormat,\n    rangeSetter,\n}","import './App.css';\nimport { useState, useEffect } from 'react'\nimport Select from 'react-select';\nimport DatePicker from 'react-date-picker';\nimport ReactGA from 'react-ga';\n\nimport DoubleLineChart from './components/DoubleLineChart.js'\nimport Loading from './components/Loading.js'\nimport SingleLineChart from './components/SingleLineChart';\n\nimport { fetchCountries, fetchCountryData } from './fetchMethods.js';\nimport { alterDateFormat, rangeSetter } from './utilMethods.js';\nconst Constants = require('./Constants.js')\n\nconst App = () => {\n  const [ visible, setVisible ] = useState(false);\n  const [ temp, setTemp ] = useState([]);\n  const [ temp2, setTemp2 ] = useState([]);\n  const [ countries, setCountries ] = useState([]);\n  const [ loading, setLoading ] = useState(true);\n\n  const [ firstRecordDate, setFirstRecordDate ] = useState();\n  const [ secondRecordDate, setSecondRecordDate ] = useState();\n  const [ secondPickerMinDate, setSecondPickerMinDate ] = useState(null);\n  const [ firstPickerMaxDate, setFirstPickerMaxDate ] = useState(null);\n\n  const [ firstDate, setFirstDate ] = useState(new Date());\n  const [ secondDate, setSecondDate ] = useState(new Date());\n\n  const [ showMessage, setShowMessage ] = useState(false)\n  const [ error, setError ] = useState(false);\n\n  const getCountryData = async(country) => {\n    ReactGA.event({\n      category: 'User',\n      action: `Changed country to ${country.value}`,\n    });\n\n    let data;\n    try {\n      data = await fetchCountryData(Constants.officialAPICountry, country.value);\n      setShowMessage(false);\n    } catch(e) {\n      try {\n        data = await fetchCountryData(Constants.backupServerURL, country.value);\n        setShowMessage(true)\n      } catch(e) {\n        setError(true);\n        setVisible(false);\n        setLoading(false);\n        return;\n      }\n    }\n\n    let dataCases = data.map(element => {\n      return {\n        name: element.Country,\n        confirmed: element.Confirmed,\n        recovered: element.Recovered,\n        active: element.Active,\n        deaths: element.Deaths,\n        date: element.Date.slice(0, 10),\n      }\n    });\n\n    let oldDates = dataCases.map(element => element.date);\n    let formattedDates = alterDateFormat(oldDates);\n\n    let i = 0;\n    dataCases = dataCases.map(element => ({...element, newDate: formattedDates[i++]}) );\n\n    let firstCase = dataCases[0];\n    let lastCase = dataCases[dataCases.length - 1];\n\n    setFirstRecordDate(new Date(`${firstCase.newDate.year}-${firstCase.newDate.monthNum}-${firstCase.newDate.day}`));\n    setSecondRecordDate(new Date(`${lastCase.newDate.year}-${lastCase.newDate.monthNum}-${lastCase.newDate.day}`));\n    \n    let lastMonthDataCases = dataCases.slice(dataCases.length - 30, dataCases.length);\n\n    setTemp(dataCases);\n\n    setTemp2(lastMonthDataCases);\n    setDefaultDates(lastMonthDataCases);\n\n    setVisible(true);\n    setLoading(false);\n  }\n\n  const onFirstDateChange = (selectedDate) => {\n    ReactGA.event({\n      category: 'User',\n      action: `Changed starting date to ${selectedDate.toLocaleString().slice(0,8)}`\n    });\n\n    setFirstDate(selectedDate);\n\n    // So that you can't select a date BEFORE first date\n    let x = new Date(selectedDate.getTime());\n    x.setDate(x.getDate() + 1);\n    // console.log('Lower Limit: ', x);\n    setSecondPickerMinDate(x);\n\n    setTemp2(rangeSetter(selectedDate, null, firstDate, secondDate, temp))\n  }\n\n  const onSecondDateChange = (selectedDate) => {\n    ReactGA.event({\n      category: 'User',\n      action: `Changed ending date to ${selectedDate.toLocaleString().slice(0,8)}`\n    });\n\n    let y = new Date(selectedDate.getTime());\n    y.setDate(y.getDate() - 1);\n    setFirstPickerMaxDate(y);\n\n    setSecondDate(selectedDate);\n    setTemp2(rangeSetter(null, selectedDate, firstDate, secondDate, temp))\n  }\n\n  const setDefaultDates = (lastMonthDataCases) => {\n    \n    let first = new Date(lastMonthDataCases[0].date);\n    let second = new Date(lastMonthDataCases[lastMonthDataCases.length - 1].date);\n    \n\n    let tempFirst = new Date(lastMonthDataCases[0].date);\n    setFirstDate(tempFirst);\n    \n    // Setting date limits for each date-picker\n    first.setDate(first.getDate() + 1);\n    second.setDate(second.getDate() - 1);\n\n    setSecondPickerMinDate(first);\n    setFirstPickerMaxDate(second);\n  }\n\n  useEffect(async() => {\n    ReactGA.initialize(Constants.GoogleAnalyticsTag);\n    ReactGA.pageview('/');\n    console.log('Google Analytics Connected')\n\n    let totalCountries;\n    try {\n      totalCountries = await fetchCountries(Constants.officialAPI);\n      setShowMessage(false);\n    } catch(e) {\n      try {\n        totalCountries = await fetchCountries(Constants.backupServerCountriesURL);\n        setShowMessage(true);\n      } catch(e) {\n        setError(true);\n        setVisible(false);\n        setLoading(false);\n        return;\n      }\n    }\n\n      // Because the data for united states is not showing up on the API, for some reason\n      totalCountries = totalCountries.filter(element => element.slug != 'united-states');\n\n      setCountries(totalCountries);\n      \n      getCountryData({ value: 'pakistan' })\n\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div id='first-section'>\n        <h1 className='heading'>COVID-19 Tracker</h1>\n        <h3 id='tagline'>Stay Home & Stay Safe</h3>\n\n        <hr style={{width: '95%'}}/>\n\n        <div className='selectors'>\n          <div className='select-container'>\n            <h3>Select Country / Region</h3>\n            <Select\n              options={ countries.map(country => ({ value: country.slug, label: country.name }) )}\n              defaultValue={ ({value: 'pakistan', label: 'Pakistan'}) }\n              onChange={ getCountryData }\n            />\n          </div>\n          <div className='date-picker-wrapper'>\n            <div className='date-picker'>\n              <h3>From</h3>\n\n              <DatePicker\n                format='dd-MM-y'\n                onChange={onFirstDateChange}\n                value={firstDate}\n                clearIcon={null}\n                minDate={firstRecordDate}\n                maxDate={firstPickerMaxDate}\n                className='picker'\n              />\n            </div>\n            <div className='date-picker'>\n              <h3>To</h3>\n\n              <DatePicker\n                format='dd-MM-y'\n                onChange={onSecondDateChange}\n                value={secondDate}\n                clearIcon={null}\n                minDate={secondPickerMinDate}\n                maxDate={secondRecordDate}\n                className='picker'\n              />\n              </div>\n          </div>\n        </div>\n\n        <hr style={{width: '95%'}}/>\n        {showMessage &&\n          <div>\n            <p className='warningMessage'>Data fetched from the backup server because the offciial API is unresponsive </p>\n            <p className='warningMessage'>(Latest dates may not be available) </p>\n          </div>\n        }\n\n        {visible &&\n          <div className='row'>\n            <DoubleLineChart\n              country={temp[0].name}\n              title={'Cases & Recoveries'}\n              firstLabel='Total Cases'\n              secondLabel='Total Recoveries'\n              graphData={temp2}\n              dotRadius={0}\n            />\n            <SingleLineChart\n              country={temp[0].name}\n              title={'Active Cases'}\n              type='Active'\n              label='Active Cases'\n              graphData={temp2}\n              color='orange'\n              dotRadius={0}\n            /> \n            <SingleLineChart\n              country={temp[0].name}\n              title={'Total Deaths'}\n              type='Deaths'\n              label='Total Deaths'\n              graphData={temp2}\n              color='red'\n              dotRadius={0}\n            /> \n          </div>\n        }\n\n        {loading && <Loading className='charts' text={'Loading...'} />}\n\n        {error &&\n          <div className='error-wrapper'>\n            <h1>Error!</h1>\n            <p>\n              There was an error retrieving the data. Both the official API and backup server seem to be unresponsive.\n              <br/>\n              <br/>\n              Please refresh the page or try again after a few minutes.\n            </p>\n          </div>\n        }\n        <div className='about-wrapper'>\n          <h2>About</h2>\n          <p>\n            The data used for the graphs in this project is publicly available\n            and was obtained from the COVID 19 API <a href='https://covid19api.com' target='_blank' onClick={()=> \n                ReactGA.event({\n                  category: 'User',\n                  action: 'Clicked official API\\'s link'\n                })\n            }>here</a>.\n            All credits for the data go to the source. Please visit their website and support them if you can.\n            <br />\n            <br />\n            The project is open source and you can view the front-end code <a href='https://github.com/TheZoraiz/React-COVID19-Tracker' target='_blank' onClick={()=> \n                ReactGA.event({\n                  category: 'User',\n                  action: 'Clicked frontend link'\n                })\n            }>here</a> and the backup server's code <a href='https://github.com/TheZoraiz/COVID19-Tracker-Backend' target='_blank' onClick={()=> \n                ReactGA.event({\n                  category: 'User',\n                  action: 'Clicked backup server\\'s link'\n                })\n        }>here</a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}