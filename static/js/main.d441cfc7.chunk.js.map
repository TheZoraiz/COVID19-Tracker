{"version":3,"sources":["components/FetchMethods.js","components/OtherMethods.js","components/DoubleLineChart.js","components/Loading.js","components/SingleLineChart.js","App.js","reportWebVitals.js","index.js"],"names":["fetch","require","module","exports","fetchCountries","Promise","resolve","reject","setTimeout","then","res","json","totalCountries","Countries","map","element","name","Country","slug","Slug","catch","error","fetchCountryData","country","alterDateFormat","dates","formatted","totalYears","forEach","date","day","slice","length","month","year","push","monthNum","getDataInRange","first","second","firstDate","secondDate","temp","startDay","getDate","startMonth","getMonth","startYear","getFullYear","endDay","endMonth","endYear","arr","tempDay","parseInt","newDate","tempMonth","tempYear","DoubleLineChart","title","firstLabel","secondLabel","graphData","dotRadius","useState","sample","setSample","useEffect","labels","datasets","label","data","confirmed","backgroundColor","borderWidth","borderColor","radius","recovered","className","height","width","options","aspectRatio","resposive","legend","fontSize","fontColor","Loading","text","type","color","SingleLineChart","active","deaths","App","visible","setVisible","setTemp","temp2","setTemp2","countries","setCountries","loading","setLoading","firstRecordDate","setFirstRecordDate","secondRecordDate","setSecondRecordDate","secondPickerMinDate","setSecondPickerMinDate","firstPickerMaxDate","setFirstPickerMaxDate","Date","setFirstDate","setSecondDate","setError","getCountryData","a","value","dataCases","Confirmed","Recovered","Active","Deaths","oldDates","formattedDates","i","firstCase","lastCase","lastMonthDataCases","setDefaultDates","console","log","rangeSetter","dataInRange","tempFirst","setDate","ReactGA","initialize","pageview","filter","id","style","defaultValue","onChange","format","selectedDate","x","getTime","clearIcon","minDate","maxDate","y","href","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAAMA,EAAQC,EAAQ,KAiCtBC,EAAOC,QAAU,CACbC,eAhCmB,WACrB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,kBAAMD,EAAO,YAAW,KACnCP,EAAM,sCACHS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAGJ,IAAIC,GAFJD,EAAOA,EAAKE,WAEcC,KAAI,SAAAC,GAAO,MAAK,CAACC,KAAMD,EAAQE,QAASC,KAAMH,EAAQI,SAChFb,EAAQ,YAAIM,OAEbQ,OAAM,SAAAC,GACLb,YAAW,kBAAMD,EAAOc,KAAQ,YAqBpCC,iBAhBqB,SAACC,GACxB,OAAO,IAAIlB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,kBAAMD,EAAO,YAAW,KACnCP,EAAM,sCAAD,OAAuCuB,IACzCd,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJL,EAAQ,YAAIK,OAEbS,OAAM,SAAAC,GACLd,EAAOc,Y,wCCgGfnB,EAAOC,QAAU,CACbqB,gBA7HoB,SAACC,GACrB,IAAIC,EAAY,GACZC,EAAa,GAkDjB,OAhDAF,EAAMG,SAAQ,SAAAC,GACV,IAAIC,EAAMD,EAAKE,MAAM,EAAGF,EAAKG,QACzBC,EAAQJ,EAAKE,MAAM,EAAG,GACtBG,EAAOL,EAAKE,MAAM,EAAG,GAKzB,OAHGJ,EAAWA,EAAWK,OAAS,KAAOE,GACzCP,EAAWQ,KAAKD,GAETD,GACP,IAAK,KACDP,EAAUS,KAAK,CAACF,MAAO,UAAWG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,gBAAgBI,KAC5F,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,WAAYG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,gBAAgBI,KAC7F,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,QAASG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,kBAAkBI,KAC5F,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,QAASG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,kBAAkBI,KAC5F,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,MAAOG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,gBAAgBI,KACxF,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,OAAQG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,iBAAiBI,KAC1F,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,OAAQG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,iBAAiBI,KAC1F,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,SAAUG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,gBAAgBI,KAC3F,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,YAAaG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,iBAAiBI,KAC/F,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,UAAWG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,gBAAgBI,KAC5F,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,WAAYG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,gBAAgBI,KAC7F,MACJ,IAAK,KACDR,EAAUS,KAAK,CAACF,MAAO,WAAYG,SAAU,KAAMF,KAAMA,EAAMJ,IAAKA,EAAKD,KAAK,GAAD,OAAKC,EAAL,gBAAgBI,SAK9FR,GA0EPW,eAvEmB,SAACC,EAAOC,EAAQC,EAAWC,EAAYC,GAE9C,MAATJ,EACDA,EAAQE,EACS,MAAVD,IACPA,EAASE,GAEX,IAAIE,EAAWL,EAAMM,UACjBC,EAAaP,EAAMQ,WAAa,EAChCC,EAAYT,EAAMU,cAElBC,EAASV,EAAOK,UAChBM,EAAWX,EAAOO,WAAa,EAC/BK,EAAUZ,EAAOS,cAEjBI,EAAM,GAmDV,OAhDGL,EAAYI,EACbT,EAAKd,SAAQ,SAAAb,GACX,IAAIsC,EAAUC,SAASvC,EAAQwC,QAAQzB,KACnC0B,EAAYF,SAASvC,EAAQwC,QAAQnB,UACrCqB,EAAWH,SAASvC,EAAQwC,QAAQrB,MAErCuB,GAAYV,EACVS,GAAaX,EACXQ,GAAWV,GACZS,EAAIjB,KAAKpB,GACHyC,GAAaX,GACrBO,EAAIjB,KAAKpB,GACH0C,GAAYV,GAAaU,EAAWN,EAC5CC,EAAIjB,KAAKpB,GACD0C,GAAYN,IACjBK,GAAaN,EACXG,GAAWJ,GACZG,EAAIjB,KAAKpB,GACHyC,GAAaN,GACrBE,EAAIjB,KAAKpB,OAMf2B,EAAKd,SAAQ,SAAAb,GACX,IAAIsC,EAAUC,SAASvC,EAAQwC,QAAQzB,KACnC0B,EAAYF,SAASvC,EAAQwC,QAAQnB,UAEtCoB,GAAaX,GAAcW,GAAaN,IACtCL,GAAcK,EACZM,GAAaX,EACXQ,GAAWV,GACZS,EAAIjB,KAAKpB,GACHyC,GAAaN,EAClBG,GAAWJ,GACZG,EAAIjB,KAAKpB,GAEXqC,EAAIjB,KAAKpB,GAGRsC,GAAWV,GAAYU,GAAWJ,GACnCG,EAAIjB,KAAKpB,OAMZqC,K,4LCzDIM,EA3DS,SAAC,GAOhB,IANPnC,EAMM,EANNA,QACAoC,EAKM,EALNA,MACAC,EAIM,EAJNA,WACAC,EAGM,EAHNA,YACAC,EAEM,EAFNA,UACAC,EACM,EADNA,UACM,EACwBC,mBAAS,IADjC,mBACEC,EADF,KACUC,EADV,KA6BN,OA1BAC,qBAAU,WACRD,EAAU,CACRE,OAAQN,EAAUhD,KAAI,SAAAC,GAAO,OAAIA,EAAQwC,QAAQ1B,QACjDwC,SAAU,CACR,CACEC,MAAOV,EAEPW,KAAMT,EAAUhD,KAAI,SAAAC,GAAO,OAAIA,EAAQyD,aACvCC,gBAAiB,gBACjBC,YAAa,EACbC,YAAa,MACbC,OAAQb,GAEV,CACEO,MAAOT,EAEPU,KAAMT,EAAUhD,KAAI,SAAAC,GAAO,OAAIA,EAAQ8D,aACvCJ,gBAAiB,gBACjBC,YAAa,EACbC,YAAa,YACbC,OAAQb,QAIb,CAACD,IAGF,sBAAKgB,UAAU,QAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BvD,IAC9B,oBAAIuD,UAAU,gBAAd,SAA+BnB,IAC/B,cAAC,OAAD,CACEY,KAAMN,EACNc,OAAQ,KACRC,MAAO,KACPC,QAAS,CACPC,YAAa,KACbC,WAAW,EACXC,OAAQ,CACNhB,OAAQ,CACNiB,SAAU,GACVC,UAAW,iB,iCCrCVC,MAdf,YAA4B,IAATC,EAAQ,EAARA,KACjB,OACE,sBAAKV,UAAU,UAAf,UACE,cAAC,IAAD,CACGW,KAAK,OACLC,MAAM,QACNX,OAAQ,GACRC,MAAO,KAETQ,MC0CQG,EAlDS,SAAC,GAQhB,IAPPpE,EAOM,EAPNA,QACAoC,EAMM,EANNA,MACA8B,EAKM,EALNA,KACA3B,EAIM,EAJNA,UACAC,EAGM,EAHNA,UACAO,EAEM,EAFNA,MACAoB,EACM,EADNA,MACM,EACwB1B,mBAAS,IADjC,mBACEC,EADF,KACUC,EADV,KAmBN,OAhBAC,qBAAU,WACRD,EAAU,CACRE,OAAQN,EAAUhD,KAAI,SAAAC,GAAO,OAAIA,EAAQwC,QAAQ1B,QACjDwC,SAAU,CACR,CACIC,MAAOA,EACPC,KAAMT,EAAUhD,KAAI,SAAAC,GAAO,MAAY,UAAR0E,EAAmB1E,EAAQ6E,OAAS7E,EAAQ8E,UAC3EpB,gBAAiB,gBACjBC,YAAa,EACbC,YAAae,EACbd,OAAQb,QAIf,CAACD,IAGF,sBAAKgB,UAAU,QAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BvD,IAC9B,oBAAIuD,UAAU,gBAAd,SAA+BnB,IAC/B,cAAC,OAAD,CACEY,KAAMN,EACNc,OAAQ,KACRC,MAAO,KACPC,QAAS,CACPC,YAAa,KACbC,WAAW,EACXC,OAAQ,CACNhB,OAAQ,CACNiB,SAAU,GACVC,UAAW,iB,ECpCoBrF,EAAQ,KAA7CG,E,EAAAA,eAAgBkB,E,EAAAA,iB,EACoBrB,EAAQ,KAA5CuB,E,EAAAA,gBAAiBa,E,EAAAA,eA8OVyD,EA5OH,WAAO,IAAD,EACgB9B,oBAAS,GADzB,mBACR+B,EADQ,KACCC,EADD,OAEUhC,mBAAS,IAFnB,mBAERtB,EAFQ,KAEFuD,EAFE,OAGYjC,mBAAS,IAHrB,mBAGRkC,EAHQ,KAGDC,EAHC,OAIoBnC,mBAAS,IAJ7B,mBAIRoC,EAJQ,KAIGC,EAJH,OAKgBrC,oBAAS,GALzB,mBAKRsC,EALQ,KAKCC,EALD,OAOgCvC,qBAPhC,mBAORwC,EAPQ,KAOSC,EAPT,OAQkCzC,qBARlC,mBAQR0C,EARQ,KAQUC,EARV,OASwC3C,mBAAS,MATjD,mBASR4C,EATQ,KASaC,EATb,OAUsC7C,mBAAS,MAV/C,mBAUR8C,EAVQ,KAUYC,EAVZ,OAYoB/C,mBAAS,IAAIgD,MAZjC,mBAYRxE,GAZQ,KAYGyE,GAZH,QAasBjD,mBAAS,IAAIgD,MAbnC,qBAaRvE,GAbQ,MAaIyE,GAbJ,SAeYlD,oBAAS,GAfrB,qBAeR3C,GAfQ,MAeD8F,GAfC,MAiBVC,GAAc,uCAAG,WAAM7F,GAAN,6BAAA8F,EAAA,+EAEF/F,EAAiBC,EAAQ+F,OAFvB,OAEf/C,EAFe,OAGfgD,EAAYhD,EAAKzD,KAAI,SAAAC,GACvB,MAAO,CACLC,KAAMD,EAAQE,QACduD,UAAWzD,EAAQyG,UACnB3C,UAAW9D,EAAQ0G,UACnB7B,OAAQ7E,EAAQ2G,OAChB7B,OAAQ9E,EAAQ4G,OAChB9F,KAAMd,EAAQiG,KAAKjF,MAAM,EAAG,QAI5B6F,EAAWL,EAAUzG,KAAI,SAAAC,GAAO,OAAIA,EAAQc,QAC5CgG,EAAiBrG,EAAgBoG,GAEjCE,EAAI,EACRP,EAAYA,EAAUzG,KAAI,SAAAC,GAAO,kCAASA,GAAT,IAAkBwC,QAASsE,EAAeC,UAEvEC,EAAYR,EAAU,GACtBS,EAAWT,EAAUA,EAAUvF,OAAS,GAE5CyE,EAAmB,IAAIO,KAAJ,UAAYe,EAAUxE,QAAQrB,KAA9B,YAAsC6F,EAAUxE,QAAQnB,SAAxD,YAAoE2F,EAAUxE,QAAQzB,OACzG6E,EAAoB,IAAIK,KAAJ,UAAYgB,EAASzE,QAAQrB,KAA7B,YAAqC8F,EAASzE,QAAQnB,SAAtD,YAAkE4F,EAASzE,QAAQzB,OAEnGmG,EAAqBV,EAAUxF,MAAMwF,EAAUvF,OAAS,GAAIuF,EAAUvF,QAE1EiE,EAAQsB,GAERpB,EAAS8B,GACTC,GAAgBD,GAEhBjC,GAAW,GACXO,GAAW,GAlCQ,kDAqCnB4B,QAAQC,IAAR,MACAjB,IAAS,GACTnB,GAAW,GACXO,GAAW,GAxCQ,0DAAH,sDAkEd8B,GAAc,SAAC/F,EAAOC,GAC1B,IAAI+F,EAAcjG,EAAeC,EAAOC,EAAQC,GAAWC,GAAYC,GACvEyD,EAASmC,IAGLJ,GAAkB,SAACD,GAEvB,IAAI3F,EAAQ,IAAI0E,KAAKiB,EAAmB,GAAGpG,MACvCU,EAAS,IAAIyE,KAAKiB,EAAmBA,EAAmBjG,OAAS,GAAGH,MAGpE0G,EAAY,IAAIvB,KAAKiB,EAAmB,GAAGpG,MAC/CoF,GAAasB,GAGbjG,EAAMkG,QAAQlG,EAAMM,UAAY,GAChCL,EAAOiG,QAAQjG,EAAOK,UAAY,GAElCiE,EAAuBvE,GACvByE,EAAsBxE,IAyBxB,OAtBA4B,oBAAS,sBAAC,4BAAAkD,EAAA,6DACRoB,IAAQC,WAAW,kBACnBD,IAAQE,SAAS,KAFT,kBAKqBvI,IALrB,OAQNQ,GAHIA,EALE,QAQ0BgI,QAAO,SAAA7H,GAAO,MAAoB,iBAAhBA,EAAQG,QAE1DmF,EAAazF,GAEbwG,GAAe,CAAEE,MAAO,aAZlB,kDAeNa,QAAQC,IAAR,MACAjB,IAAS,GACTnB,GAAW,GACXO,GAAW,GAlBL,0DAoBP,IAGD,qBAAKzB,UAAU,MAAf,SACE,sBAAK+D,GAAG,gBAAR,UACE,oBAAI/D,UAAU,UAAd,8BACA,oBAAI+D,GAAG,UAAP,mCAEA,oBAAIC,MAAO,CAAC9D,MAAO,SAEnB,sBAAKF,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,yDACA,cAAC,IAAD,CACEG,QAAUmB,EAAUtF,KAAI,SAAAS,GAAO,MAAK,CAAE+F,MAAO/F,EAAQL,KAAMoD,MAAO/C,EAAQP,SAC1E+H,aAAgB,CAACzB,MAAO,WAAYhD,MAAO,YAC3C0E,SAAW5B,QAGf,sBAAKtC,UAAU,sBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,sCAEA,cAAC,IAAD,CACEmE,OAAO,UACPD,SAzFY,SAACE,GACzBjC,GAAaiC,GAGb,IAAIC,EAAI,IAAInC,KAAKkC,EAAaE,WAC9BD,EAAEX,QAAQW,EAAEvG,UAAY,GAExBiE,EAAuBsC,GAEvBd,GAAYa,EAAc,OAiFd5B,MAAO9E,GACP6G,UAAW,KACXC,QAAS9C,EACT+C,QAASzC,EACThC,UAAU,cAGd,sBAAKA,UAAU,cAAf,UACE,oCAEA,cAAC,IAAD,CACEmE,OAAO,UACPD,SA1Fa,SAACE,GAE1B,IAAIM,EAAI,IAAIxC,KAAKkC,EAAaE,WAC9BI,EAAEhB,QAAQgB,EAAE5G,UAAY,GACxBmE,EAAsByC,GAEtBtC,GAAcgC,GACdb,GAAY,KAAMa,IAoFN5B,MAAO7E,GACP4G,UAAW,KACXC,QAAS1C,EACT2C,QAAS7C,EACT5B,UAAU,oBAMlB,oBAAIgE,MAAO,CAAC9D,MAAO,SAElBe,GACC,sBAAKjB,UAAU,MAAf,UACE,cAAC,EAAD,CACEvD,QAASmB,EAAK,GAAG1B,KACjB2C,MAAO,qBACPC,WAAW,cACXC,YAAY,mBACZC,UAAWoC,EACXnC,UAAW,IAEb,cAAC,EAAD,CACExC,QAASmB,EAAK,GAAG1B,KACjB2C,MAAO,eACP8B,KAAK,SACLnB,MAAM,eACNR,UAAWoC,EACXR,MAAM,SACN3B,UAAW,IAEb,cAAC,EAAD,CACExC,QAASmB,EAAK,GAAG1B,KACjB2C,MAAO,eACP8B,KAAK,SACLnB,MAAM,eACNR,UAAWoC,EACXR,MAAM,MACN3B,UAAW,OAKhBuC,GAAW,cAAC,EAAD,CAASxB,UAAU,SAASU,KAAM,eAE7CnE,IACC,sBAAKyD,UAAU,gBAAf,UACE,wCACA,wEAEE,uBAFF,kEAOJ,sBAAKA,UAAU,gBAAf,UACE,uCACA,2IAEyC,mBAAG2E,KAAK,yBAAyBC,OAAO,SAAxC,kBAFzC,uGAIE,uBACA,uBALF,+DAM8D,mBAAGD,KAAK,qDAAqDC,OAAO,SAApE,8BCpOzDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpJ,MAAK,YAAkD,IAA/CqJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.d441cfc7.chunk.js","sourcesContent":["const fetch = require('node-fetch');\n\nconst fetchCountries = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => reject('Error!'), 10000);\n    fetch('https://api.covid19api.com/summary')\n      .then(res => res.json())\n      .then(json => {\n        json = json.Countries;\n        // Array of objects with country names and slugs\n        let totalCountries = json.map(element => ({name: element.Country, slug: element.Slug}) );\n        resolve([...totalCountries]);\n      })\n      .catch(error => {\n        setTimeout(() => reject(error), 5000);\n      });\n  }); \n}\n\nconst fetchCountryData = (country) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => reject('Error!'), 5000);\n    fetch(`https://api.covid19api.com/country/${country}`)\n      .then(res => res.json())\n      .then(json => {\n        resolve([...json]);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  }); \n}\n\nmodule.exports = {\n    fetchCountries,\n    fetchCountryData,\n}","const alterDateFormat = (dates) => {\n    let formatted = [];\n    let totalYears = [];\n\n    dates.forEach(date => {\n        let day = date.slice(8, date.length);\n        let month = date.slice(5, 7);\n        let year = date.slice(0, 4);\n\n        if(totalYears[totalYears.length - 1] !== year)\n        totalYears.push(year);\n\n        switch(month) {\n        case '01':\n            formatted.push({month: 'January', monthNum: '01', year: year, day: day, date: `${day} Jan ${year}`});\n            break;\n        case '02':\n            formatted.push({month: 'February', monthNum: '02', year: year, day: day, date: `${day} Feb ${year}`});\n            break;\n        case '03':\n            formatted.push({month: 'March', monthNum: '03', year: year, day: day, date: `${day} March ${year}`});\n            break;\n        case '04':\n            formatted.push({month: 'April', monthNum: '04', year: year, day: day, date: `${day} April ${year}`});\n            break;\n        case '05':\n            formatted.push({month: 'May', monthNum: '05', year: year, day: day, date: `${day} May ${year}`});\n            break;\n        case '06':\n            formatted.push({month: 'June', monthNum: '06', year: year, day: day, date: `${day} June ${year}`});\n            break;\n        case '07':\n            formatted.push({month: 'July', monthNum: '07', year: year, day: day, date: `${day} July ${year}`});\n            break;\n        case '08':\n            formatted.push({month: 'August', monthNum: '08', year: year, day: day, date: `${day} Aug ${year}`});\n            break;\n        case '09':\n            formatted.push({month: 'September', monthNum: '09', year: year, day: day, date: `${day} Sept ${year}`});\n            break;\n        case '10':\n            formatted.push({month: 'October', monthNum: '10', year: year, day: day, date: `${day} Oct ${year}`});\n            break;\n        case '11':\n            formatted.push({month: 'November', monthNum: '11', year: year, day: day, date: `${day} Nov ${year}`});\n            break;\n        case '12':\n            formatted.push({month: 'December', monthNum: '12', year: year, day: day, date: `${day} Dec ${year}`});\n            break;\n        }\n    });\n\n    return formatted;\n}\n\nconst getDataInRange = (first, second, firstDate, secondDate, temp) => {\n    // Condition because state changers don't immediatelly alter state\n    if(first == null)\n      first = firstDate;\n    else if (second == null)\n      second = secondDate;\n    \n    let startDay = first.getDate();\n    let startMonth = first.getMonth() + 1;\n    let startYear = first.getFullYear();\n\n    let endDay = second.getDate();\n    let endMonth = second.getMonth() + 1;\n    let endYear = second.getFullYear();\n\n    let arr = [];\n\n    // If selected years are different\n    if(startYear < endYear) {\n      temp.forEach(element => {\n        let tempDay = parseInt(element.newDate.day);\n        let tempMonth = parseInt(element.newDate.monthNum);\n        let tempYear = parseInt(element.newDate.year);\n        \n        if(tempYear == startYear) {\n          if(tempMonth == startMonth) {\n            if(tempDay >= startDay)\n              arr.push(element);\n          } else if(tempMonth >= startMonth)\n            arr.push(element);\n        } else if(tempYear >= startYear && tempYear < endYear) {\n          arr.push(element);\n        } else if(tempYear == endYear) {\n          if(tempMonth == endMonth) {\n            if(tempDay <= endDay)\n              arr.push(element);\n          } else if(tempMonth <= endMonth)\n            arr.push(element);\n        }\n      });\n    \n    // If selected years are same\n    } else {\n      temp.forEach(element => {\n        let tempDay = parseInt(element.newDate.day);\n        let tempMonth = parseInt(element.newDate.monthNum);\n  \n        if(tempMonth >= startMonth && tempMonth <= endMonth) {\n          if(startMonth != endMonth) {\n            if(tempMonth == startMonth) {\n              if(tempDay >= startDay)\n                arr.push(element)\n            } else if(tempMonth == endMonth) {\n              if(tempDay <= endDay)\n                arr.push(element);\n            } else {\n              arr.push(element);\n            }\n          } else {\n            if(tempDay >= startDay && tempDay <= endDay)\n              arr.push(element);\n          }\n        }\n      });\n    }\n\n    return arr;\n  }\n\nmodule.exports = {\n    alterDateFormat,\n    getDataInRange,\n}","import './charts.css';\nimport { Line } from 'react-chartjs-2'\nimport { useState, useEffect } from 'react'\n\n\nconst DoubleLineChart = ({\n  country,\n  title,\n  firstLabel,\n  secondLabel,\n  graphData,\n  dotRadius,\n  }) => {\n  const [ sample, setSample ] = useState({});\n\n  useEffect(() => {\n    setSample({\n      labels: graphData.map(element => element.newDate.date),\n      datasets: [\n        {\n          label: firstLabel,\n          // label: typeBool ? 'Total Cases To Date' : 'Active Cases',\n          data: graphData.map(element => element.confirmed),\n          backgroundColor: 'rgba(1,1,1,0)',\n          borderWidth: 2,\n          borderColor: 'red',\n          radius: dotRadius,\n        },\n        {\n          label: secondLabel,\n          // label: typeBool ? 'Total Recoveries To Date' : 'Total Deaths',\n          data: graphData.map(element => element.recovered),\n          backgroundColor: 'rgba(1,1,1,0)',\n          borderWidth: 2,\n          borderColor: 'turquoise',\n          radius: dotRadius,\n        },\n      ]\n    });\n  }, [graphData])\n\n  return (\n    <div className=\"chart\">\n      <h2 className='country-name'>{country}</h2>\n      <h2 className='country-title'>{title}</h2>\n      <Line\n        data={sample}\n        height={null}\n        width={null}\n        options={{\n          aspectRatio: 1.15,\n          resposive: true,\n          legend: {\n            labels: {\n              fontSize: 15,\n              fontColor: 'black'\n            }\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default DoubleLineChart;\n","import './Loading.css';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\nimport Loader from 'react-loader-spinner'\n\nfunction Loading({ text }) {\n  return (\n    <div className=\"loading\">\n      <Loader\n         type='Oval'\n         color=\"black\"\n         height={70}\n         width={70}\n      />\n      {text}\n    </div>\n  );\n}\n\nexport default Loading;\n","import './charts.css';\nimport { Line } from 'react-chartjs-2'\nimport { useState, useEffect } from 'react'\n\n\nconst SingleLineChart = ({ \n  country,\n  title,\n  type,\n  graphData,\n  dotRadius,\n  label,\n  color,\n  }) => {\n  const [ sample, setSample ] = useState({});\n\n  useEffect(() => {\n    setSample({\n      labels: graphData.map(element => element.newDate.date),\n      datasets: [\n        {\n            label: label,\n            data: graphData.map(element => type == 'Active' ? element.active : element.deaths),\n            backgroundColor: 'rgba(1,1,1,0)',\n            borderWidth: 2,\n            borderColor: color,\n            radius: dotRadius,\n        },\n      ]\n    });\n  }, [graphData])\n\n  return (\n    <div className=\"chart\">\n      <h2 className='country-name'>{country}</h2>\n      <h2 className='country-title'>{title}</h2>\n      <Line\n        data={sample}\n        height={null}\n        width={null}\n        options={{\n          aspectRatio: 1.15,\n          resposive: true,\n          legend: {\n            labels: {\n              fontSize: 15,\n              fontColor: 'black'\n            }\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport default SingleLineChart;\n","import './App.css';\nimport { useState, useEffect } from 'react'\nimport Select from 'react-select';\nimport DatePicker from 'react-date-picker';\nimport ReactGA from 'react-ga';\n\nimport DoubleLineChart from './components/DoubleLineChart.js'\nimport Loading from './components/Loading.js'\nimport SingleLineChart from './components/SingleLineChart';\n\nconst { fetchCountries, fetchCountryData } = require('./components/FetchMethods.js');\nconst { alterDateFormat, getDataInRange } = require('./components/OtherMethods.js');\n\nconst App = () => {\n  const [ visible, setVisible ] = useState(false);\n  const [ temp, setTemp ] = useState([]);\n  const [ temp2, setTemp2 ] = useState([]);\n  const [ countries, setCountries ] = useState([]);\n  const [ loading, setLoading ] = useState(true);\n\n  const [ firstRecordDate, setFirstRecordDate ] = useState();\n  const [ secondRecordDate, setSecondRecordDate ] = useState();\n  const [ secondPickerMinDate, setSecondPickerMinDate ] = useState(null);\n  const [ firstPickerMaxDate, setFirstPickerMaxDate ] = useState(null);\n\n  const [ firstDate, setFirstDate ] = useState(new Date());\n  const [ secondDate, setSecondDate ] = useState(new Date());\n\n  const [ error, setError ] = useState(false);\n\n  const getCountryData = async(country) => {\n    try {\n      let data = await fetchCountryData(country.value);\n      let dataCases = data.map(element => {\n        return {\n          name: element.Country,\n          confirmed: element.Confirmed,\n          recovered: element.Recovered,\n          active: element.Active,\n          deaths: element.Deaths,\n          date: element.Date.slice(0, 10),\n        }\n      });\n\n      let oldDates = dataCases.map(element => element.date);\n      let formattedDates = alterDateFormat(oldDates);\n\n      let i = 0;\n      dataCases = dataCases.map(element => ({...element, newDate: formattedDates[i++]}) );\n\n      let firstCase = dataCases[0];\n      let lastCase = dataCases[dataCases.length - 1];\n\n      setFirstRecordDate(new Date(`${firstCase.newDate.year}-${firstCase.newDate.monthNum}-${firstCase.newDate.day}`));\n      setSecondRecordDate(new Date(`${lastCase.newDate.year}-${lastCase.newDate.monthNum}-${lastCase.newDate.day}`));\n      \n      let lastMonthDataCases = dataCases.slice(dataCases.length - 30, dataCases.length);\n\n      setTemp(dataCases);\n\n      setTemp2(lastMonthDataCases);\n      setDefaultDates(lastMonthDataCases);\n\n      setVisible(true);\n      setLoading(false);\n\n    } catch(e) {\n      console.log(e);\n      setError(true);\n      setVisible(false);\n      setLoading(false);\n    }\n  }\n\n  const onFirstDateChange = (selectedDate) => {\n    setFirstDate(selectedDate);\n\n    // So that you can't select a date BEFORE first date\n    let x = new Date(selectedDate.getTime());\n    x.setDate(x.getDate() + 1);\n    // console.log('Lower Limit: ', x);\n    setSecondPickerMinDate(x);\n\n    rangeSetter(selectedDate, null);\n  }\n\n  const onSecondDateChange = (selectedDate) => {\n\n    let y = new Date(selectedDate.getTime());\n    y.setDate(y.getDate() - 1);\n    setFirstPickerMaxDate(y);\n\n    setSecondDate(selectedDate);\n    rangeSetter(null, selectedDate);\n  }\n\n  const rangeSetter = (first, second) => {\n    let dataInRange = getDataInRange(first, second, firstDate, secondDate, temp);\n    setTemp2(dataInRange);\n  }\n\n  const setDefaultDates = (lastMonthDataCases) => {\n    \n    let first = new Date(lastMonthDataCases[0].date);\n    let second = new Date(lastMonthDataCases[lastMonthDataCases.length - 1].date);\n    \n\n    let tempFirst = new Date(lastMonthDataCases[0].date);\n    setFirstDate(tempFirst);\n    \n    // Setting date limits for each date-picker\n    first.setDate(first.getDate() + 1);\n    second.setDate(second.getDate() - 1);\n\n    setSecondPickerMinDate(first);\n    setFirstPickerMaxDate(second);\n  }\n\n  useEffect(async() => {\n    ReactGA.initialize('UA-183443755-2');\n    ReactGA.pageview('/');\n\n    try {\n      let totalCountries = await fetchCountries()\n\n      // Because the data for united states is not showing up on the API, for some reason\n      totalCountries = totalCountries.filter(element => element.slug != 'united-states');\n\n      setCountries(totalCountries);\n      \n      getCountryData({ value: 'pakistan' })\n\n    } catch(e) {\n      console.log(e);\n      setError(true);\n      setVisible(false);\n      setLoading(false);\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div id='first-section'>\n        <h1 className='heading'>COVID-19 Tracker</h1>\n        <h3 id='tagline'>Stay Home & Stay Safe</h3>\n\n        <hr style={{width: '95%'}}/>\n\n        <div className='selectors'>\n          <div className='select-container'>\n            <h3>Select Country / Region</h3>\n            <Select\n              options={ countries.map(country => ({ value: country.slug, label: country.name }) )}\n              defaultValue={ ({value: 'pakistan', label: 'Pakistan'}) }\n              onChange={ getCountryData }\n            />\n          </div>\n          <div className='date-picker-wrapper'>\n            <div className='date-picker'>\n              <h3>From</h3>\n\n              <DatePicker\n                format='dd-MM-y'\n                onChange={onFirstDateChange}\n                value={firstDate}\n                clearIcon={null}\n                minDate={firstRecordDate}\n                maxDate={firstPickerMaxDate}\n                className='picker'\n              />\n            </div>\n            <div className='date-picker'>\n              <h3>To</h3>\n\n              <DatePicker\n                format='dd-MM-y'\n                onChange={onSecondDateChange}\n                value={secondDate}\n                clearIcon={null}\n                minDate={secondPickerMinDate}\n                maxDate={secondRecordDate}\n                className='picker'\n              />\n              </div>\n          </div>\n        </div>\n\n        <hr style={{width: '95%'}}/>\n\n        {visible &&\n          <div className='row'>\n            <DoubleLineChart\n              country={temp[0].name}\n              title={'Cases & Recoveries'}\n              firstLabel='Total Cases'\n              secondLabel='Total Recoveries'\n              graphData={temp2}\n              dotRadius={0}\n            />\n            <SingleLineChart\n              country={temp[0].name}\n              title={'Active Cases'}\n              type='Active'\n              label='Active Cases'\n              graphData={temp2}\n              color='orange'\n              dotRadius={0}\n            /> \n            <SingleLineChart\n              country={temp[0].name}\n              title={'Total Deaths'}\n              type='Deaths'\n              label='Total Deaths'\n              graphData={temp2}\n              color='red'\n              dotRadius={0}\n            /> \n          </div>\n        }\n\n        {loading && <Loading className='charts' text={'Loading...'} />}\n\n        {error &&\n          <div className='error-wrapper'>\n            <h1>Error!</h1>\n            <p>\n              There was an error retrieving the data.\n              <br/>\n              Please refresh the page or try again after a few minutes.\n            </p>\n          </div>\n        }\n        <div className='about-wrapper'>\n          <h2>About</h2>\n          <p>\n            The data used for the graphs in this project is publicly available\n            and was obtained from the COVID 19 API <a href='https://covid19api.com' target='_blank'>here</a>.\n            All credits for the data go to the source. Please visit their website and support them if you can.\n            <br />\n            <br />\n            The project is open source and you can view the source code <a href='https://github.com/TheZoraiz/React-COVID19-Tracker' target='_blank'>here</a>\n\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}