{"version":3,"sources":["components/Loading.js","components/DoubleLineChart.js","components/SingleLineChart.js","App.js","reportWebVitals.js","index.js"],"names":["Loading","text","className","type","color","height","width","DoubleLineChart","title","firstLabel","secondLabel","graphData","dotRadius","useState","sample","setSample","useEffect","labels","map","element","date","datasets","label","data","confirmed","backgroundColor","borderWidth","borderColor","radius","recovered","options","aspectRatio","resposive","legend","fontSize","fontColor","SingleLineChart","active","deaths","fetch","require","fetchCountryData","country","Promise","resolve","reject","setTimeout","then","res","json","catch","error","App","visible","setVisible","temp","setTemp","temp2","setTemp2","countries","setCountries","loading","setLoading","firstRecordDate","setFirstRecordDate","secondRecordDate","setSecondRecordDate","secondPickerMinDate","setSecondPickerMinDate","Date","firstDate","setFirstDate","secondDate","setSecondDate","setError","alterDateFormat","dates","formatted","totalYears","forEach","day","slice","length","month","year","push","monthNum","getCountryData","a","value","dataCases","name","Country","Confirmed","Recovered","Active","Deaths","oldDates","formattedDates","i","firstCase","lastCase","lastMonthDataCases","filter","parseInt","setDefaultDates","console","log","rangeSetter","first","second","startDay","getDate","startMonth","getMonth","startYear","getFullYear","endDay","endMonth","endYear","arr","tempDay","tempMonth","tempYear","x","firstMonthDay","x2","getTime","setDate","ReactGA","initialize","pageview","totalCountries","Countries","slug","Slug","id","style","defaultValue","onChange","format","selectedDate","clearIcon","minDate","maxDate","href","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95812036.chunk.js","sourcesContent":["import './Loading.css';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nfunction Loading({ text }) {\r\n  return (\r\n    <div className=\"loading\">\r\n      <Loader\r\n         type='Oval'\r\n         color=\"black\"\r\n         height={70}\r\n         width={70}\r\n      />\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import './charts.css';\r\nimport { Line } from 'react-chartjs-2'\r\nimport { useState, useEffect } from 'react'\r\n\r\n\r\nfunction DoubleLineChart({ title, firstLabel, secondLabel, graphData, type, dotRadius }) {\r\n  const [ sample, setSample ] = useState({});\r\n\r\n  useEffect(() => {\r\n    setSample({\r\n      labels: graphData.map(element => element.date.date),\r\n      datasets: [\r\n        {\r\n          label: firstLabel,\r\n          // label: typeBool ? 'Total Cases To Date' : 'Active Cases',\r\n          data: graphData.map(element => element.confirmed),\r\n          backgroundColor: 'rgba(1,1,1,0)',\r\n          borderWidth: 2,\r\n          borderColor: 'red',\r\n          radius: dotRadius,\r\n        },\r\n        {\r\n          label: secondLabel,\r\n          // label: typeBool ? 'Total Recoveries To Date' : 'Total Deaths',\r\n          data: graphData.map(element => element.recovered),\r\n          backgroundColor: 'rgba(1,1,1,0)',\r\n          borderWidth: 2,\r\n          borderColor: 'turquoise',\r\n          radius: dotRadius,\r\n        },\r\n      ]\r\n    });\r\n  }, [graphData])\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <h2 className='country-title'>{title}</h2>\r\n      <Line\r\n        data={sample}\r\n        height={null}\r\n        width={null}\r\n        options={{\r\n          aspectRatio: 1.15,\r\n          resposive: true,\r\n          legend: {\r\n            labels: {\r\n              fontSize: 15,\r\n              fontColor: 'black'\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoubleLineChart;\r\n","import './charts.css';\r\nimport { Line } from 'react-chartjs-2'\r\nimport { useState, useEffect } from 'react'\r\n\r\n\r\nfunction SingleLineChart({ title, type, graphData, dotRadius, label, color }) {\r\n  const [ sample, setSample ] = useState({});\r\n\r\n  useEffect(() => {\r\n    setSample({\r\n      labels: graphData.map(element => element.date.date),\r\n      datasets: [\r\n        {\r\n            label: label,\r\n            data: graphData.map(element => type == 'Active' ? element.active : element.deaths),\r\n            backgroundColor: 'rgba(1,1,1,0)',\r\n            borderWidth: 2,\r\n            borderColor: color,\r\n            radius: dotRadius,\r\n        },\r\n      ]\r\n    });\r\n  }, [graphData])\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <h2 className='country-title'>{title}</h2>\r\n      <Line\r\n        data={sample}\r\n        height={null}\r\n        width={null}\r\n        options={{\r\n          aspectRatio: 1.15,\r\n          resposive: true,\r\n          legend: {\r\n            labels: {\r\n              fontSize: 15,\r\n              fontColor: 'black'\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleLineChart;\r\n","import './App.css';\nimport { useState, useEffect } from 'react'\nimport Select from 'react-select';\nimport DatePicker from 'react-date-picker';\nimport ReactGA from 'react-ga';\n\nimport Loading from './components/Loading.js'\nimport DoubleLineChart from './components/DoubleLineChart.js'\nimport SingleLineChart from './components/SingleLineChart';\nconst fetch = require('node-fetch');\n\n\nconst fetchCountries = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => reject('Error!'), 10000);\n    fetch('https://api.covid19api.com/summary')\n      .then(res => res.json())\n      .then(json => {\n        console.log(json);\n        json = json.Countries;\n        // Array of objects with country names and slugs\n        let totalCountries = json.map(element => ({name: element.Country, slug: element.Slug}) );\n        resolve([...totalCountries]);\n      })\n      .catch(error => {\n        setTimeout(() => reject(error), 5000);\n      });\n  }); \n}\n\nconst fetchCountryData = (country) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => reject('Error!'), 5000);\n    fetch(`https://api.covid19api.com/country/${country}`)\n      .then(res => res.json())\n      .then(json => {\n        resolve([...json]);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  }); \n}\n\nconst App = () => {\n  const [ visible, setVisible ] = useState(false);\n  const [ temp, setTemp ] = useState([]);\n  const [ temp2, setTemp2 ] = useState([]);\n  const [ countries, setCountries ] = useState([]);\n  const [ loading, setLoading ] = useState(true);\n\n  const [ firstRecordDate, setFirstRecordDate ] = useState();\n  const [ secondRecordDate, setSecondRecordDate ] = useState();\n  const [ secondPickerMinDate, setSecondPickerMinDate ] = useState(null);\n\n  const [ firstDate, setFirstDate ] = useState(new Date());\n  const [ secondDate, setSecondDate ] = useState(new Date());\n\n  const [ error, setError ] = useState(false);\n\n  const alterDateFormat = (dates) => {\n    let formatted = [];\n    let totalYears = [];\n\n    dates.forEach(date => {\n      let day = date.slice(8, date.length);\n      let month = date.slice(5, 7);\n      let year = date.slice(0, 4);\n\n      if(totalYears[totalYears.length - 1] !== year)\n        totalYears.push(year);\n\n      switch(month) {\n        case '01':\n          formatted.push({month: 'January', monthNum: '01', year: year, day: day, date: `${day} Jan ${year}`});\n          break;\n        case '02':\n          formatted.push({month: 'February', monthNum: '02', year: year, day: day, date: `${day} Feb ${year}`});\n          break;\n        case '03':\n          formatted.push({month: 'March', monthNum: '03', year: year, day: day, date: `${day} March ${year}`});\n          break;\n        case '04':\n          formatted.push({month: 'April', monthNum: '04', year: year, day: day, date: `${day} April ${year}`});\n          break;\n        case '05':\n          formatted.push({month: 'May', monthNum: '05', year: year, day: day, date: `${day} May ${year}`});\n          break;\n        case '06':\n          formatted.push({month: 'June', monthNum: '06', year: year, day: day, date: `${day} June ${year}`});\n          break;\n        case '07':\n          formatted.push({month: 'July', monthNum: '07', year: year, day: day, date: `${day} July ${year}`});\n          break;\n        case '08':\n          formatted.push({month: 'August', monthNum: '08', year: year, day: day, date: `${day} Aug ${year}`});\n          break;\n        case '09':\n          formatted.push({month: 'September', monthNum: '09', year: year, day: day, date: `${day} Sept ${year}`});\n          break;\n        case '10':\n          formatted.push({month: 'October', monthNum: '10', year: year, day: day, date: `${day} Oct ${year}`});\n          break;\n        case '11':\n          formatted.push({month: 'November', monthNum: '11', year: year, day: day, date: `${day} Nov ${year}`});\n          break;\n        case '12':\n          formatted.push({month: 'December', monthNum: '12', year: year, day: day, date: `${day} Dec ${year}`});\n          break;\n      }\n    });\n\n    // console.log(formatted);\n    return formatted;\n  }\n\n  const getCountryData = async(country) => {\n    try {\n      let data = await fetchCountryData(country.value);\n      let dataCases = data.map(element => {\n        return {\n          name: element.Country,\n          confirmed: element.Confirmed,\n          recovered: element.Recovered,\n          active: element.Active,\n          deaths: element.Deaths,\n          date: element.Date.slice(0, 10),\n        }\n      });\n\n      let oldDates = dataCases.map(element => element.date);\n      let formattedDates = alterDateFormat(oldDates);\n\n      let i = 0;\n      dataCases = dataCases.map(element => ({...element, date: formattedDates[i++]}) );\n\n      let firstCase = dataCases[0];\n      let lastCase = dataCases[dataCases.length - 1];\n\n      setFirstRecordDate(new Date(`${firstCase.date.year}-${firstCase.date.monthNum}-${firstCase.date.day}`));\n      setSecondRecordDate(new Date(`${lastCase.date.year}-${lastCase.date.monthNum}-${lastCase.date.day}`));\n\n      setTemp(dataCases);\n\n      // Selects the most recent month's cases\n      let lastMonthDataCases = dataCases.filter(element => element.date.year == lastCase.date.year\n        && element.date.monthNum == lastCase.date.monthNum\n        && parseInt(element.date.day) <= parseInt(lastCase.date.day));\n\n      setDefaultDates();\n\n      setTemp2(lastMonthDataCases);\n      setVisible(true);\n      setLoading(false);\n\n    } catch(e) {\n      console.log(e);\n      setError(true);\n      setVisible(false);\n      setLoading(false);\n    }\n  }\n\n  const onFirstDateChange = (selectedDate) => {\n    setFirstDate(selectedDate);\n\n    // So that you can't select a date BEFORE first date\n    let x = new Date(selectedDate.getTime());\n    x.setDate(x.getDate() + 2);\n    setSecondPickerMinDate(x)\n\n    rangeSetter(selectedDate, null);\n  }\n\n  const onSecondDateChange = (selectedDate) => {\n    setSecondDate(selectedDate);\n    rangeSetter(null, selectedDate);\n  }\n\n  const rangeSetter = (first, second) => {\n    // Condition because state changers don't immediatelly alter state\n    if(first == null)\n      first = firstDate;\n    else if (second == null)\n      second = secondDate;    \n    \n    let startDay = first.getDate();\n    let startMonth = first.getMonth() + 1;\n    let startYear = first.getFullYear();\n\n    let endDay = second.getDate();\n    let endMonth = second.getMonth() + 1;\n    let endYear = second.getFullYear();\n\n    let arr = [];\n\n    temp.forEach(element => {\n      let tempDay = parseInt(element.date.day);\n      let tempMonth = parseInt(element.date.monthNum);\n      let tempYear = parseInt(element.date.year);\n\n      if(tempMonth >= startMonth && tempMonth <= endMonth) {\n\n        if(tempYear >= startYear && tempYear <= endYear) {\n          if(startMonth != endMonth) {\n            if(tempMonth == startMonth) {\n              if(tempDay >= startDay)\n                arr.push(element)\n            } else if(tempMonth == endMonth) {\n              if(tempDay <= endDay)\n                arr.push(element);\n            } else {\n              arr.push(element);\n            }\n          } else {\n            if(tempDay >= startDay && tempDay <= endDay)\n              arr.push(element);\n          }\n        }\n      }\n\n    });\n    // console.log(arr);\n    setTemp2(arr);\n  }\n\n  const setDefaultDates = () => {\n    let x = new Date();\n    let firstMonthDay = new Date(x.getFullYear(), x.getMonth(), 1);\n    \n    setFirstDate(firstMonthDay)\n\n    // So that you can't select a date BEFORE first date\n    let x2 = new Date(firstMonthDay.getTime());\n    x2.setDate(x2.getDate() + 2);\n    setSecondPickerMinDate(x2)\n  }\n\n  useEffect(async() => {\n    ReactGA.initialize('UA-183443755-2');\n    ReactGA.pageview('/');\n    \n    try {\n      let totalCountries = await fetchCountries()\n\n      // Because the data for united states is not showing up on the API, for some reason\n      totalCountries = totalCountries.filter(element => element.slug != 'united-states');\n\n      setCountries(totalCountries);\n      \n      getCountryData({ value: 'pakistan' })\n\n      setDefaultDates();\n\n    } catch(e) {\n      console.log(e);\n      setError(true);\n      setVisible(false);\n      setLoading(false);\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div id='first-section'>\n        <h1 className='heading'>COVID-19 Tracker</h1>\n        <h3 id='tagline'>Stay Home & Stay Safe</h3>\n\n        <hr style={{width: '95%'}}/>\n\n        <div className='selectors'>\n          <div className='select-container'>\n            <h3>Select Country / Region</h3>\n            <Select\n              options={ countries.map(country => ({ value: country.slug, label: country.name }) )}\n              defaultValue={ ({value: 'pakistan', label: 'Pakistan'}) }\n              onChange={ getCountryData }\n            />\n          </div>\n          <div className='date-picker-wrapper'>\n            <div className='date-picker'>\n              <h3>From</h3>\n\n              <DatePicker\n                format='dd-MM-y'\n                onChange={onFirstDateChange}\n                value={firstDate}\n                clearIcon={null}\n                minDate={firstRecordDate}\n                maxDate={secondRecordDate}\n                className='picker'\n              />\n            </div>\n            <div className='date-picker'>\n              <h3>To</h3>\n\n              <DatePicker\n                format='dd-MM-y'\n                onChange={onSecondDateChange}\n                value={secondDate}\n                clearIcon={null}\n                minDate={secondPickerMinDate}\n                maxDate={secondRecordDate}\n                className='picker'\n              />\n              </div>\n          </div>\n        </div>\n\n        <hr style={{width: '95%'}}/>\n\n        {visible &&\n          <div className='row'>\n            <DoubleLineChart\n              title={`${temp[0].name} Cases & Recoveries`}\n              firstLabel='Total Cases'\n              secondLabel='Total Recoveries'\n              graphData={temp2}\n              dotRadius={0}\n            />\n            <SingleLineChart\n              title={`${temp[0].name} Active Cases`}\n              type='Active'\n              label='Active Cases'\n              graphData={temp2}\n              color='orange'\n              dotRadius={0}\n            /> \n            <SingleLineChart\n              title={`${temp[0].name} Total Deaths`}\n              type='Deaths'\n              label='Total Deaths'\n              graphData={temp2}\n              color='red'\n              dotRadius={0}\n            /> \n          </div>\n        }\n\n        {loading && <Loading className='charts' text={'Loading...'} />}\n\n        {error &&\n          <div className='error-wrapper'>\n            <h1>Error!</h1>\n            <p>\n              There was an error retrieving the data.\n              <br/>\n              Please refresh the page or try again after a few minutes.\n            </p>\n          </div>\n        }\n        <div className='about-wrapper'>\n          <h2>About</h2>\n          <p>\n            The data used for the graphs in this project is publicly available\n            and was obtained from the COVID 19 API <a href='https://covid19api.com' target='_blank'>here</a>.\n            All credits for the data go to the source. Please visit their website and support them if you can.\n            <br />\n            <br />\n            The project is open source and you can view the source code <a href='https://github.com/TheZoraiz/React-COVID19-Tracker' target='_blank'>here</a>\n\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}